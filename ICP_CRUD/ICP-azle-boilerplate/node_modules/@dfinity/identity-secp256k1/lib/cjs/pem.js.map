{"version":3,"file":"pem.js","sourceRoot":"","sources":["../../src/pem.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC,MAAM,MAAM,GAAG,gCAAgC,CAAC;AAChD,MAAM,MAAM,GAAG,8BAA8B,CAAC;AAE9C;;;;GAIG;AACH,SAAgB,cAAc,CAAC,GAAW;IACxC,MAAM,KAAK,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACrC,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAC/B,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAC9C,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IACD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IACD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IACD,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IACrE,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvE,gCAAgC;IAChC,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpC,oBAAoB;QACpB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,kCAAkC,CAAC,EAAE,CAAC;YACzE,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACtD,CAAC;QACD,gEAAgE;QAChE,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAC7B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;IAC7D,CAAC;AACH,CAAC;AA7BD,wCA6BC","sourcesContent":["import * as asn1js from 'asn1js';\n\nconst HEADER = `-----BEGIN EC PRIVATE KEY-----`;\nconst FOOTER = `-----END EC PRIVATE KEY-----`;\n\n/**\n * Parse a PEM-encoded key into an ArrayBuffer\n * @param pem - the PEM-encoded key\n * @returns secret key as an ArrayBuffer\n */\nexport function pemToSecretKey(pem: string): ArrayBuffer {\n  const lines = pem.trim().split('\\n');\n  const header = lines[0].trim();\n  const footer = lines[lines.length - 1].trim();\n  if (lines.length < 3) {\n    throw new Error('Invalid PEM format');\n  }\n  if (!header.startsWith(HEADER)) {\n    throw new Error('Invalid PEM header');\n  }\n  if (!footer.startsWith(FOOTER)) {\n    throw new Error('Invalid PEM footer');\n  }\n  const base64Data = lines.slice(1, -1).join('').replace(/\\r?\\n/g, '');\n  const rawKey = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));\n\n  // Parse the key as ASN.1 object\n  try {\n    const asn1 = asn1js.fromBER(rawKey);\n    // OID for secp256k1\n    if (!asn1.result.toString().includes(`OBJECT IDENTIFIER : 1.3.132.0.10`)) {\n      throw new Error('Invalid curve, must be secp256k1');\n    }\n    // Returns the 32-byte raw private key at the appropriate offset\n    return rawKey.slice(7, 39);\n  } catch (error) {\n    console.error(error);\n    throw new Error('Encountered error while parsing PEM key');\n  }\n}\n"]}