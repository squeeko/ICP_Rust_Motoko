"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pemToSecretKey = void 0;
const asn1js = __importStar(require("asn1js"));
const HEADER = `-----BEGIN EC PRIVATE KEY-----`;
const FOOTER = `-----END EC PRIVATE KEY-----`;
/**
 * Parse a PEM-encoded key into an ArrayBuffer
 * @param pem - the PEM-encoded key
 * @returns secret key as an ArrayBuffer
 */
function pemToSecretKey(pem) {
    const lines = pem.trim().split('\n');
    const header = lines[0].trim();
    const footer = lines[lines.length - 1].trim();
    if (lines.length < 3) {
        throw new Error('Invalid PEM format');
    }
    if (!header.startsWith(HEADER)) {
        throw new Error('Invalid PEM header');
    }
    if (!footer.startsWith(FOOTER)) {
        throw new Error('Invalid PEM footer');
    }
    const base64Data = lines.slice(1, -1).join('').replace(/\r?\n/g, '');
    const rawKey = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));
    // Parse the key as ASN.1 object
    try {
        const asn1 = asn1js.fromBER(rawKey);
        // OID for secp256k1
        if (!asn1.result.toString().includes(`OBJECT IDENTIFIER : 1.3.132.0.10`)) {
            throw new Error('Invalid curve, must be secp256k1');
        }
        // Returns the 32-byte raw private key at the appropriate offset
        return rawKey.slice(7, 39);
    }
    catch (error) {
        console.error(error);
        throw new Error('Encountered error while parsing PEM key');
    }
}
exports.pemToSecretKey = pemToSecretKey;
//# sourceMappingURL=pem.js.map