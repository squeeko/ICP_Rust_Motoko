{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/enums/token.enums.ts", "../../src/constants/constants.ts", "../../src/parser/token.ts", "../../src/services/canister.ts", "../../src/utils/actor.utils.ts", "../../src/utils/agent.utils.ts", "../../src/utils/asserts.utils.ts", "../../src/utils/arrays.utils.ts", "../../src/utils/base32.utils.ts", "../../src/utils/crc.utils.ts", "../../src/utils/debounce.utils.ts", "../../src/utils/nullish.utils.ts", "../../src/utils/did.utils.ts", "../../src/utils/json.utils.ts", "../../src/utils/principal.utils.ts", "../../src/utils/version.utils.ts"],
  "sourcesContent": ["export * from \"./enums/token.enums\";\nexport * from \"./parser/token\";\nexport * from \"./services/canister\";\nexport * from \"./types/actor-type.utils\";\nexport type { CanisterOptions } from \"./types/canister.options\";\nexport type { QueryParams } from \"./types/query.params\";\nexport * from \"./utils/actor.utils\";\nexport * from \"./utils/agent.utils\";\nexport * from \"./utils/arrays.utils\";\nexport * from \"./utils/asserts.utils\";\nexport * from \"./utils/base32.utils\";\nexport * from \"./utils/crc.utils\";\nexport * from \"./utils/debounce.utils\";\nexport * from \"./utils/did.utils\";\nexport * from \"./utils/json.utils\";\nexport * from \"./utils/nullish.utils\";\nexport * from \"./utils/principal.utils\";\nexport * from \"./utils/version.utils\";\n", "export enum FromStringToTokenError {\n  FractionalMoreThan8Decimals,\n  InvalidFormat,\n}\n", "export const E8S_PER_TOKEN = BigInt(100000000);\n", "import { E8S_PER_TOKEN } from \"../constants/constants\";\nimport { FromStringToTokenError } from \"../enums/token.enums\";\n\n/**\n * Receives a string representing a number and returns the big int or error.\n *\n * @param amount - in string format\n * @returns bigint | FromStringToTokenError\n */\nexport const convertStringToE8s = (\n  value: string,\n): bigint | FromStringToTokenError => {\n  // replace exponential format (1e-4) with plain (0.0001)\n  // doesn't support decimals for values >= ~1e16\n  let amount = value.includes(\"e\")\n    ? Number(value).toLocaleString(\"en\", {\n        useGrouping: false,\n        maximumFractionDigits: 20,\n      })\n    : value;\n\n  // Remove all instances of \",\" and \"'\".\n  amount = amount.trim().replace(/[,']/g, \"\");\n\n  // Verify that the string is of the format 1234.5678\n  const regexMatch = amount.match(/\\d*(\\.\\d*)?/);\n  if (!regexMatch || regexMatch[0] !== amount) {\n    return FromStringToTokenError.InvalidFormat;\n  }\n\n  const [integral, fractional] = amount.split(\".\");\n\n  let e8s = BigInt(0);\n\n  if (integral) {\n    try {\n      e8s += BigInt(integral) * E8S_PER_TOKEN;\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  if (fractional) {\n    if (fractional.length > 8) {\n      return FromStringToTokenError.FractionalMoreThan8Decimals;\n    }\n    try {\n      e8s += BigInt(fractional.padEnd(8, \"0\"));\n    } catch {\n      return FromStringToTokenError.InvalidFormat;\n    }\n  }\n\n  return e8s;\n};\n\nexport interface Token {\n  symbol: string;\n  name: string;\n}\n\nexport const ICPToken: Token = {\n  symbol: \"ICP\",\n  name: \"Internet Computer\",\n};\n\n/**\n * Represents an amount of tokens.\n *\n * @param e8s - The amount of tokens in bigint.\n * @param token - The token type.\n */\nexport class TokenAmount {\n  private constructor(\n    protected e8s: bigint,\n    public token: Token,\n  ) {}\n\n  /**\n   * Initialize from a bigint. Bigint are considered e8s.\n   *\n   * @param {amount: bigint; token?: Token;} params\n   * @param {bigint} params.amount The amount in bigint format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromE8s({\n    amount,\n    token,\n  }: {\n    amount: bigint;\n    token: Token;\n  }): TokenAmount {\n    return new TokenAmount(amount, token);\n  }\n\n  /**\n   * Initialize from a string. Accepted formats:\n   *\n   * 1234567.8901\n   * 1'234'567.8901\n   * 1,234,567.8901\n   *\n   * @param {amount: string; token?: Token;} params\n   * @param {string} params.amount The amount in string format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromString({\n    amount,\n    token,\n  }: {\n    amount: string;\n    token: Token;\n  }): TokenAmount | FromStringToTokenError {\n    const e8s = convertStringToE8s(amount);\n\n    if (typeof e8s === \"bigint\") {\n      return new TokenAmount(e8s, token);\n    }\n    return e8s;\n  }\n\n  /**\n   * Initialize from a number.\n   *\n   * 1 integer is considered E8S_PER_TOKEN\n   *\n   * @param {amount: number; token?: Token;} params\n   * @param {string} params.amount The amount in number format.\n   * @param {Token} params.token The token type.\n   */\n  public static fromNumber({\n    amount,\n    token,\n  }: {\n    amount: number;\n    token: Token;\n  }): TokenAmount {\n    const tokenAmount = TokenAmount.fromString({\n      amount: amount.toString(),\n      token,\n    });\n    if (tokenAmount instanceof TokenAmount) {\n      return tokenAmount;\n    }\n    if (tokenAmount === FromStringToTokenError.FractionalMoreThan8Decimals) {\n      throw new Error(`Number ${amount} has more than 8 decimals`);\n    }\n\n    // This should never happen\n    throw new Error(`Invalid number ${amount}`);\n  }\n\n  /**\n   *\n   * @returns The amount of e8s.\n   */\n  public toE8s(): bigint {\n    return this.e8s;\n  }\n}\n", "import type { Principal } from \"@dfinity/principal\";\nimport type { QueryParams } from \"../types/query.params\";\n\nexport abstract class Canister<T> {\n  protected constructor(\n    private readonly id: Principal,\n    protected readonly service: T,\n    protected readonly certifiedService: T,\n  ) {}\n\n  get canisterId(): Principal {\n    return this.id;\n  }\n\n  protected caller = ({ certified = true }: QueryParams): T =>\n    certified ? this.certifiedService : this.service;\n}\n", "import type { ActorConfig, ActorSubclass, Agent } from \"@dfinity/agent\";\nimport { Actor } from \"@dfinity/agent\";\nimport type { IDL } from \"@dfinity/candid\";\nimport type { Principal } from \"@dfinity/principal\";\nimport type { CanisterOptions } from \"../types/canister.options\";\nimport { defaultAgent } from \"./agent.utils\";\n\ntype RequiredCanisterOptions<T> = Required<\n  Pick<CanisterOptions<T>, \"canisterId\">\n> &\n  Omit<CanisterOptions<T>, \"canisterId\">;\n\nexport const createServices = <T>({\n  options: {\n    canisterId,\n    serviceOverride,\n    certifiedServiceOverride,\n    agent: agentOption,\n    callTransform,\n    queryTransform,\n  },\n  idlFactory,\n  certifiedIdlFactory,\n}: {\n  options: RequiredCanisterOptions<T> &\n    Pick<ActorConfig, \"queryTransform\" | \"callTransform\">;\n  idlFactory: IDL.InterfaceFactory;\n  certifiedIdlFactory: IDL.InterfaceFactory;\n}): {\n  service: ActorSubclass<T>;\n  certifiedService: ActorSubclass<T>;\n  agent: Agent;\n  canisterId: Principal;\n} => {\n  const agent: Agent = agentOption ?? defaultAgent();\n\n  const service: ActorSubclass<T> =\n    serviceOverride ??\n    Actor.createActor<T>(idlFactory, {\n      agent,\n      canisterId,\n      callTransform,\n      queryTransform,\n    });\n\n  const certifiedService: ActorSubclass<T> =\n    certifiedServiceOverride ??\n    Actor.createActor<T>(certifiedIdlFactory, {\n      agent,\n      canisterId,\n      callTransform,\n      queryTransform,\n    });\n\n  return { service, certifiedService, agent, canisterId };\n};\n", "import type { Agent, Identity } from \"@dfinity/agent\";\nimport { AnonymousIdentity, HttpAgent } from \"@dfinity/agent\";\n\n/**\n * Get a default agent that connects to mainnet with the anonymous identity.\n * @returns The default agent to use\n */\nexport const defaultAgent = (): Agent =>\n  new HttpAgent({\n    host: \"https://ic0.app\",\n    identity: new AnonymousIdentity(),\n  });\n\n/**\n * Create an agent for a given identity\n * @param identity A mandatory identity to use for the agent\n * @param host An optional host to connect to\n * @param fetchRootKey Fetch root key for certificate validation during local development or on testnet\n */\nexport const createAgent = async ({\n  identity,\n  host,\n  fetchRootKey = false,\n}: {\n  identity: Identity;\n  host?: string;\n  fetchRootKey?: boolean;\n}): Promise<HttpAgent> => {\n  const agent: HttpAgent = new HttpAgent({\n    identity,\n    ...(host !== undefined && { host }),\n  });\n\n  if (fetchRootKey) {\n    await agent.fetchRootKey();\n  }\n\n  return agent;\n};\n", "export class InvalidPercentageError extends Error {}\nexport class NullishError extends Error {}\n\nexport const assertNonNullish: <T>(\n  value: T,\n  message?: string,\n) => asserts value is NonNullable<T> = <T>(\n  value: T,\n  message?: string,\n): void => {\n  if (value === null || value === undefined) {\n    throw new NullishError(message);\n  }\n};\nexport const assertPercentageNumber = (percentage: number) => {\n  if (percentage < 0 || percentage > 100) {\n    throw new InvalidPercentageError(\n      `${percentage} is not a valid percentage number.`,\n    );\n  }\n};\n", "import { assertNonNullish } from \"./asserts.utils\";\n\nexport const uint8ArrayToBigInt = (array: Uint8Array): bigint => {\n  const view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  if (typeof view.getBigUint64 === \"function\") {\n    return view.getBigUint64(0);\n  } else {\n    const high = BigInt(view.getUint32(0));\n    const low = BigInt(view.getUint32(4));\n\n    return (high << BigInt(32)) + low;\n  }\n};\n\nexport const bigIntToUint8Array = (value: bigint): Uint8Array => {\n  const buffer = new ArrayBuffer(8);\n  const view = new DataView(buffer);\n  if (typeof view.setBigUint64 === \"function\") {\n    view.setBigUint64(0, value);\n  } else {\n    const high = Number(value >> BigInt(32));\n    const low = Number(value & BigInt(0xffffffff));\n\n    view.setUint32(0, high);\n    view.setUint32(4, low);\n  }\n\n  return new Uint8Array(buffer);\n};\n\nexport const numberToUint8Array = (value: number): Uint8Array => {\n  const view = new DataView(new ArrayBuffer(8));\n  for (let index = 7; index >= 0; --index) {\n    view.setUint8(index, value % 256);\n    value = value >> 8;\n  }\n  return new Uint8Array(view.buffer);\n};\n\nexport const arrayBufferToUint8Array = (buffer: ArrayBuffer): Uint8Array =>\n  new Uint8Array(buffer);\n\nexport const uint8ArrayToArrayOfNumber = (array: Uint8Array): Array<number> =>\n  Array.from(array);\n\nexport const arrayOfNumberToUint8Array = (numbers: Array<number>): Uint8Array =>\n  new Uint8Array(numbers);\n\nexport const asciiStringToByteArray = (text: string): Array<number> =>\n  Array.from(text).map((c) => c.charCodeAt(0));\n\nexport const hexStringToUint8Array = (hexString: string): Uint8Array => {\n  const matches = hexString.match(/.{1,2}/g);\n\n  assertNonNullish(matches, \"Invalid hex string.\");\n\n  return Uint8Array.from(matches.map((byte) => parseInt(byte, 16)));\n};\n\nexport const uint8ArrayToHexString = (bytes: Uint8Array) =>\n  bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"\");\n", "import { assertNonNullish } from \"./asserts.utils\";\n\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz234567\";\n\n// Build a lookup table for decoding.\nconst LOOKUP_TABLE: Record<string, number> = Object.create(null);\nfor (let i = 0; i < ALPHABET.length; i++) {\n  LOOKUP_TABLE[ALPHABET[i]] = i;\n}\n\n// Add aliases for rfc4648.\nLOOKUP_TABLE[\"0\"] = LOOKUP_TABLE.o;\nLOOKUP_TABLE[\"1\"] = LOOKUP_TABLE.i;\n\n/**\n * Encode an Uint8Array to a base32 string.\n *\n * @param input The input array to encode.\n * @returns A Base32 string encoding the input.\n */\nexport const encodeBase32 = (input: Uint8Array): string => {\n  // How many bits will we skip from the first byte.\n  let skip = 0;\n  // 5 high bits, carry from one byte to the next.\n  let bits = 0;\n\n  // The output string in base32.\n  let output = \"\";\n\n  function encodeByte(byte: number): number {\n    if (skip < 0) {\n      // we have a carry from the previous byte\n      bits |= byte >> -skip;\n    } else {\n      // no carry\n      bits = (byte << skip) & 248;\n    }\n\n    if (skip > 3) {\n      // Not enough data to produce a character, get us another one\n      skip -= 8;\n      return 1;\n    }\n\n    if (skip < 4) {\n      // produce a character\n      output += ALPHABET[bits >> 3];\n      skip += 5;\n    }\n\n    return 0;\n  }\n\n  for (let i = 0; i < input.length; ) {\n    i += encodeByte(input[i]);\n  }\n\n  return output + (skip < 0 ? ALPHABET[bits >> 3] : \"\");\n};\n\n/**\n * Decode a base32 string to Uint8Array.\n *\n * @param input The input string to decode.\n * @param input The base32 encoded string to decode.\n */\nexport function decodeBase32(input: string): Uint8Array {\n  // how many bits we have from the previous character.\n  let skip = 0;\n  // current byte we're producing.\n  let byte = 0;\n\n  const output = new Uint8Array(((input.length * 4) / 3) | 0);\n  let o = 0;\n\n  function decodeChar(char: string) {\n    // Consume a character from the stream, store\n    // the output in this.output. As before, better\n    // to use update().\n    let val = LOOKUP_TABLE[char.toLowerCase()];\n    assertNonNullish(val, `Invalid character: ${JSON.stringify(char)}`);\n\n    // move to the high bits\n    val <<= 3;\n    byte |= val >>> skip;\n    skip += 5;\n\n    if (skip >= 8) {\n      // We have enough bytes to produce an output\n      output[o++] = byte;\n      skip -= 8;\n\n      if (skip > 0) {\n        byte = (val << (5 - skip)) & 255;\n      } else {\n        byte = 0;\n      }\n    }\n  }\n\n  for (const c of input) {\n    decodeChar(c);\n  }\n\n  return output.slice(0, o);\n}\n", "// This file is translated to JavaScript from\n// https://lxp32.github.io/docs/a-simple-example-crc32-calculation/\nconst lookUpTable: Uint32Array = new Uint32Array([\n  0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,\n  0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n  0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n  0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n  0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n  0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n  0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,\n  0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n  0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n  0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n  0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,\n  0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n  0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,\n  0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n  0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n  0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n  0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,\n  0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n  0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,\n  0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n  0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n  0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n  0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,\n  0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n  0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n  0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n  0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n  0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n  0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,\n  0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n  0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,\n  0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n  0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n  0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n  0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n  0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n  0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,\n  0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n  0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n  0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n  0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,\n  0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n  0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n]);\n\nconst crc32 = (bytes: Uint8Array): number => {\n  let crc = -1;\n\n  for (let i = 0; i < bytes.length; i++) {\n    const byte = bytes[i];\n    const t = (byte ^ crc) & 0xff;\n    crc = lookUpTable[t] ^ (crc >>> 8);\n  }\n\n  return (crc ^ -1) >>> 0;\n};\n\nexport const bigEndianCrc32 = (bytes: Uint8Array): Uint8Array => {\n  const checksumArrayBuf = new ArrayBuffer(4);\n  const view = new DataView(checksumArrayBuf);\n  view.setUint32(0, crc32(bytes), false);\n  return new Uint8Array(checksumArrayBuf);\n};\n", "/* eslint-disable-next-line @typescript-eslint/ban-types */\nexport const debounce = (func: Function, timeout?: number) => {\n  let timer: NodeJS.Timer | undefined;\n\n  return (...args: unknown[]) => {\n    const next = () => func(...args);\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(\n      next,\n      timeout !== undefined && timeout > 0 ? timeout : 300,\n    );\n  };\n};\n", "/** Is null or undefined */\nexport const isNullish = <T>(\n  argument: T | undefined | null,\n): argument is undefined | null => argument === null || argument === undefined;\n\n/** Not null and not undefined */\nexport const nonNullish = <T>(\n  argument: T | undefined | null,\n): argument is NonNullable<T> => !isNullish(argument);\n\n/** Not null and not undefined and not empty */\nexport const notEmptyString = (value: string | undefined | null): boolean =>\n  nonNullish(value) && value !== \"\";\n", "import { assertNonNullish } from \"./asserts.utils\";\nimport { nonNullish } from \"./nullish.utils\";\n\nexport const toNullable = <T>(value?: T | null): [] | [T] => {\n  return nonNullish(value) ? [value] : [];\n};\n\nexport const fromNullable = <T>(value: [] | [T]): T | undefined => {\n  return value?.[0];\n};\n\nexport const fromDefinedNullable = <T>(value: [] | [T]): T => {\n  const result = fromNullable(value);\n\n  assertNonNullish(result);\n\n  return result;\n};\n", "import { Principal } from \"@dfinity/principal\";\nimport { nonNullish } from \"./nullish.utils\";\n\nconst JSON_KEY_BIGINT = \"__bigint__\";\nconst JSON_KEY_PRINCIPAL = \"__principal__\";\nconst JSON_KEY_UINT8ARRAY = \"__uint8array__\";\n\n/**\n * A parser that interprets revived BigInt, Principal, and Uint8Array when constructing JavaScript values or objects.\n */\nexport const jsonReplacer = (_key: string, value: unknown): unknown => {\n  if (typeof value === \"bigint\") {\n    return { [JSON_KEY_BIGINT]: `${value}` };\n  }\n\n  if (nonNullish(value) && value instanceof Principal) {\n    return { [JSON_KEY_PRINCIPAL]: value.toText() };\n  }\n\n  if (nonNullish(value) && value instanceof Uint8Array) {\n    return { [JSON_KEY_UINT8ARRAY]: Array.from(value) };\n  }\n\n  return value;\n};\n\n/**\n * A function that alters the behavior of the stringification process for BigInt, Principal and Uint8Array.\n */\nexport const jsonReviver = (_key: string, value: unknown): unknown => {\n  const mapValue = <T>(key: string): T => (value as Record<string, T>)[key];\n\n  if (\n    nonNullish(value) &&\n    typeof value === \"object\" &&\n    JSON_KEY_BIGINT in value\n  ) {\n    return BigInt(mapValue(JSON_KEY_BIGINT));\n  }\n\n  if (\n    nonNullish(value) &&\n    typeof value === \"object\" &&\n    JSON_KEY_PRINCIPAL in value\n  ) {\n    return Principal.fromText(mapValue(JSON_KEY_PRINCIPAL));\n  }\n\n  if (\n    nonNullish(value) &&\n    typeof value === \"object\" &&\n    JSON_KEY_UINT8ARRAY in value\n  ) {\n    return Uint8Array.from(mapValue(JSON_KEY_UINT8ARRAY));\n  }\n\n  return value;\n};\n", "import type { Principal } from \"@dfinity/principal\";\n\n/**\n * Convert a principal to a Uint8Array 32 length.\n * e.g. Useful to convert a canister ID when topping up cycles with the Cmc canister\n * @param principal The principal that needs to be converted to Subaccount\n */\nexport const principalToSubAccount = (principal: Principal): Uint8Array => {\n  const bytes: Uint8Array = principal.toUint8Array();\n  const subAccount: Uint8Array = new Uint8Array(32);\n  subAccount[0] = bytes.length;\n  subAccount.set(bytes, 1);\n  return subAccount;\n};\n", "const AMOUNT_VERSION_PARTS = 3;\nconst addZeros = (nums: number[], amountZeros: number): number[] =>\n  amountZeros > nums.length\n    ? [...nums, ...[...Array(amountZeros - nums.length).keys()].map(() => 0)]\n    : nums;\n\nconst convertToNumber = (versionStringPart: string): number => {\n  if (!Number.isNaN(Number(versionStringPart))) {\n    return Number(versionStringPart);\n  }\n  const strippedVersion = versionStringPart.split(\"\").reduce((acc, char) => {\n    if (Number.isNaN(Number(char))) {\n      return acc;\n    }\n    return acc + char;\n  }, \"\");\n  return Number(strippedVersion);\n};\n/**\n * Returns true if the current version is smaller than the minVersion, false if equal or bigger.\n * Tags after patch version are ignored, e.g. 1.0.0-beta.1 is considered equal to 1.0.0.\n *\n * @param {Object} params\n * @param {string} params.minVersion Ex: \"1.0.0\"\n * @param {string} params.currentVersion Ex: \"2.0.0\"\n * @returns boolean\n */\nexport const smallerVersion = ({\n  minVersion,\n  currentVersion,\n}: {\n  minVersion: string;\n  currentVersion: string;\n}): boolean => {\n  const minVersionStandarized = addZeros(\n    minVersion.split(\".\").map(convertToNumber),\n    AMOUNT_VERSION_PARTS,\n  ).join(\".\");\n  const currentVersionStandarized = addZeros(\n    currentVersion.split(\".\").map(convertToNumber),\n    AMOUNT_VERSION_PARTS,\n  ).join(\".\");\n  // Versions need to have the same number of parts to be comparable\n  // Source: https://stackoverflow.com/a/65687141\n  return (\n    currentVersionStandarized.localeCompare(minVersionStandarized, undefined, {\n      numeric: true,\n      sensitivity: \"base\",\n    }) < 0\n  );\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Canister", "FromStringToTokenError", "ICPToken", "InvalidPercentageError", "NullishError", "TokenAmount", "arrayBufferToUint8Array", "arrayOfNumberToUint8Array", "asciiStringToByteArray", "assertNonNullish", "assertPercentageNumber", "bigEndianCrc32", "bigIntToUint8Array", "convertStringToE8s", "createAgent", "createServices", "debounce", "decodeBase32", "defaultAgent", "encodeBase32", "fromDefinedNullable", "fromNullable", "hexStringToUint8Array", "isNullish", "jsonReplacer", "jsonReviver", "nonNullish", "notEmptyString", "numberToUint8Array", "principalToSubAccount", "smallerVersion", "toNullable", "uint8ArrayToArrayOfNumber", "uint8ArrayToBigInt", "uint8ArrayToHexString", "__toCommonJS", "FromStringToTokenError", "E8S_PER_TOKEN", "convertStringToE8s", "value", "amount", "regexMatch", "integral", "fractional", "e8s", "E8S_PER_TOKEN", "ICPToken", "TokenAmount", "token", "tokenAmount", "Canister", "id", "service", "certifiedService", "certified", "import_agent", "import_agent", "defaultAgent", "createAgent", "identity", "host", "fetchRootKey", "agent", "createServices", "canisterId", "serviceOverride", "certifiedServiceOverride", "agentOption", "callTransform", "queryTransform", "idlFactory", "certifiedIdlFactory", "agent", "defaultAgent", "service", "certifiedService", "InvalidPercentageError", "NullishError", "assertNonNullish", "value", "message", "assertPercentageNumber", "percentage", "uint8ArrayToBigInt", "array", "view", "high", "low", "bigIntToUint8Array", "value", "buffer", "numberToUint8Array", "index", "arrayBufferToUint8Array", "uint8ArrayToArrayOfNumber", "arrayOfNumberToUint8Array", "numbers", "asciiStringToByteArray", "text", "c", "hexStringToUint8Array", "hexString", "matches", "assertNonNullish", "byte", "uint8ArrayToHexString", "bytes", "str", "ALPHABET", "LOOKUP_TABLE", "i", "encodeBase32", "input", "skip", "bits", "output", "encodeByte", "byte", "decodeBase32", "o", "decodeChar", "char", "val", "assertNonNullish", "c", "lookUpTable", "crc32", "bytes", "crc", "i", "t", "bigEndianCrc32", "checksumArrayBuf", "debounce", "func", "timeout", "timer", "args", "next", "isNullish", "argument", "nonNullish", "notEmptyString", "value", "toNullable", "value", "nonNullish", "fromNullable", "fromDefinedNullable", "result", "assertNonNullish", "import_principal", "JSON_KEY_BIGINT", "JSON_KEY_PRINCIPAL", "JSON_KEY_UINT8ARRAY", "jsonReplacer", "_key", "value", "nonNullish", "jsonReviver", "mapValue", "key", "principalToSubAccount", "principal", "bytes", "subAccount", "addZeros", "nums", "amountZeros", "convertToNumber", "versionStringPart", "strippedVersion", "acc", "char", "smallerVersion", "minVersion", "currentVersion", "minVersionStandarized"]
}
