"use strict";var q=Object.defineProperty;var Y=Object.getOwnPropertyDescriptor;var J=Object.getOwnPropertyNames;var K=Object.prototype.hasOwnProperty;var I=(t,a)=>{for(var e in a)q(t,e,{get:a[e],enumerable:!0})},L=(t,a,e,c)=>{if(a&&typeof a=="object"||typeof a=="function")for(let r of J(a))!K.call(t,r)&&r!==e&&q(t,r,{get:()=>a[r],enumerable:!(c=Y(a,r))||c.enumerable});return t};var D=t=>L(q({},"__esModule",{value:!0}),t);var nt={};I(nt,{IcrcIndexCanister:()=>_,IcrcLedgerCanister:()=>T,IcrcMetadataResponseEntries:()=>X,IcrcTransferError:()=>V,IndexError:()=>y,decodeIcrcAccount:()=>ct,decodePayment:()=>at,encodeIcrcAccount:()=>rt});module.exports=D(nt);var y=class extends Error{};var V=class extends Error{constructor({msg:e,errorType:c}){super(e);this.errorType=c}};var b=require("@dfinity/utils");var z=({IDL:t})=>{let a=t.Record({ledger_id:t.Principal}),e=t.Nat,c=t.Record({owner:t.Principal,subaccount:t.Opt(t.Vec(t.Nat8))}),r=t.Record({max_results:t.Nat,start:t.Opt(e),account:c}),n=t.Record({burn:t.Opt(t.Record({from:c,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat})),kind:t.Text,mint:t.Opt(t.Record({to:c,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat})),timestamp:t.Nat64,transfer:t.Opt(t.Record({to:c,fee:t.Opt(t.Nat),from:c,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat}))}),i=t.Record({id:e,transaction:n}),l=t.Record({transactions:t.Vec(i),oldest_tx_id:t.Opt(e)}),N=t.Record({message:t.Text}),s=t.Variant({Ok:l,Err:N}),d=t.Vec(t.Nat8),m=t.Record({owner:t.Principal,start:t.Opt(d)});return t.Service({get_account_transactions:t.Func([r],[s],[]),ledger_id:t.Func([],[t.Principal],[]),list_subaccounts:t.Func([m],[t.Vec(d)],[])})};var Q=({IDL:t})=>{let a=t.Record({ledger_id:t.Principal}),e=t.Nat,c=t.Record({owner:t.Principal,subaccount:t.Opt(t.Vec(t.Nat8))}),r=t.Record({max_results:t.Nat,start:t.Opt(e),account:c}),n=t.Record({burn:t.Opt(t.Record({from:c,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat})),kind:t.Text,mint:t.Opt(t.Record({to:c,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat})),timestamp:t.Nat64,transfer:t.Opt(t.Record({to:c,fee:t.Opt(t.Nat),from:c,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat}))}),i=t.Record({id:e,transaction:n}),l=t.Record({transactions:t.Vec(i),oldest_tx_id:t.Opt(e)}),N=t.Record({message:t.Text}),s=t.Variant({Ok:l,Err:N}),d=t.Vec(t.Nat8),m=t.Record({owner:t.Principal,start:t.Opt(d)});return t.Service({get_account_transactions:t.Func([r],[s],[]),ledger_id:t.Func([],[t.Principal],["query"]),list_subaccounts:t.Func([m],[t.Vec(d)],["query"])})};var U=require("@dfinity/utils"),tt=({owner:t,subaccount:a})=>({owner:t,subaccount:(0,U.toNullable)(a)}),H=({account:t,max_results:a,start:e})=>({account:tt(t),max_results:a,start:(0,U.toNullable)(e)});var _=class extends b.Canister{constructor(){super(...arguments);this.getTransactions=async e=>{let c=await this.caller({certified:!0}).get_account_transactions(H(e));if("Err"in c)throw new y(c.Err.message);return c.Ok}}static create(e){let{service:c,certifiedService:r,canisterId:n}=(0,b.createServices)({options:e,idlFactory:Q,certifiedIdlFactory:z});return new _(n,c,r)}};var f=require("@dfinity/utils");var W=({IDL:t})=>{let a=t.Rec(),e=t.Variant({Int:t.Int,Nat:t.Nat,Blob:t.Vec(t.Nat8),Text:t.Text}),c=t.Vec(t.Nat8),r=t.Record({owner:t.Principal,subaccount:t.Opt(c)}),n=t.Variant({SetTo:r,Unset:t.Null}),i=t.Record({token_symbol:t.Opt(t.Text),transfer_fee:t.Opt(t.Nat64),metadata:t.Opt(t.Vec(t.Tuple(t.Text,e))),change_fee_collector:t.Opt(n),max_memo_length:t.Opt(t.Nat16),token_name:t.Opt(t.Text)}),l=t.Record({token_symbol:t.Text,transfer_fee:t.Nat64,metadata:t.Vec(t.Tuple(t.Text,e)),minting_account:r,initial_balances:t.Vec(t.Tuple(r,t.Nat64)),fee_collector_account:t.Opt(r),archive_options:t.Record({num_blocks_to_archive:t.Nat64,trigger_threshold:t.Nat64,max_message_size_bytes:t.Opt(t.Nat64),cycles_for_archive_creation:t.Opt(t.Nat64),node_max_memory_size_bytes:t.Opt(t.Nat64),controller_id:t.Principal}),token_name:t.Text}),N=t.Variant({Upgrade:t.Opt(i),Init:l}),s=t.Nat,d=t.Record({start:s,length:t.Nat}),m=t.Vec(t.Tuple(t.Text,a));a.fill(t.Variant({Int:t.Int,Map:m,Nat:t.Nat,Nat64:t.Nat64,Blob:t.Vec(t.Nat8),Text:t.Text,Array:t.Vec(a)}));let g=a,A=t.Record({blocks:t.Vec(g)}),k=t.Func([d],[A],[]),F=t.Record({certificate:t.Opt(t.Vec(t.Nat8)),first_index:s,blocks:t.Vec(g),chain_length:t.Nat64,archived_blocks:t.Vec(t.Record({callback:k,start:s,length:t.Nat}))}),v=t.Record({certificate:t.Opt(t.Vec(t.Nat8)),hash_tree:t.Vec(t.Nat8)}),u=t.Nat,x=t.Record({start:u,length:t.Nat}),O=t.Record({burn:t.Opt(t.Record({from:r,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat})),kind:t.Text,mint:t.Opt(t.Record({to:r,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat})),timestamp:t.Nat64,transfer:t.Opt(t.Record({to:r,fee:t.Opt(t.Nat),from:r,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat}))}),P=t.Record({transactions:t.Vec(O)}),S=t.Func([x],[P],[]),B=t.Record({first_index:u,log_length:t.Nat,transactions:t.Vec(O),archived_transactions:t.Vec(t.Record({callback:S,start:u,length:t.Nat}))}),o=t.Nat,G=t.Nat64,E=t.Record({to:r,fee:t.Opt(o),memo:t.Opt(t.Vec(t.Nat8)),from_subaccount:t.Opt(c),created_at_time:t.Opt(G),amount:o}),C=t.Variant({GenericError:t.Record({message:t.Text,error_code:t.Nat}),TemporarilyUnavailable:t.Null,BadBurn:t.Record({min_burn_amount:o}),Duplicate:t.Record({duplicate_of:s}),BadFee:t.Record({expected_fee:o}),CreatedInFuture:t.Record({ledger_time:t.Nat64}),TooOld:t.Null,InsufficientFunds:t.Record({balance:o})}),w=t.Variant({Ok:s,Err:C});return t.Service({get_blocks:t.Func([d],[F],[]),get_data_certificate:t.Func([],[v],[]),get_transactions:t.Func([x],[B],[]),icrc1_balance_of:t.Func([r],[o],[]),icrc1_decimals:t.Func([],[t.Nat8],[]),icrc1_fee:t.Func([],[o],[]),icrc1_metadata:t.Func([],[t.Vec(t.Tuple(t.Text,e))],[]),icrc1_minting_account:t.Func([],[t.Opt(r)],[]),icrc1_name:t.Func([],[t.Text],[]),icrc1_supported_standards:t.Func([],[t.Vec(t.Record({url:t.Text,name:t.Text}))],[]),icrc1_symbol:t.Func([],[t.Text],[]),icrc1_total_supply:t.Func([],[o],[]),icrc1_transfer:t.Func([E],[w],[])})};var Z=({IDL:t})=>{let a=t.Rec(),e=t.Variant({Int:t.Int,Nat:t.Nat,Blob:t.Vec(t.Nat8),Text:t.Text}),c=t.Vec(t.Nat8),r=t.Record({owner:t.Principal,subaccount:t.Opt(c)}),n=t.Variant({SetTo:r,Unset:t.Null}),i=t.Record({token_symbol:t.Opt(t.Text),transfer_fee:t.Opt(t.Nat64),metadata:t.Opt(t.Vec(t.Tuple(t.Text,e))),change_fee_collector:t.Opt(n),max_memo_length:t.Opt(t.Nat16),token_name:t.Opt(t.Text)}),l=t.Record({token_symbol:t.Text,transfer_fee:t.Nat64,metadata:t.Vec(t.Tuple(t.Text,e)),minting_account:r,initial_balances:t.Vec(t.Tuple(r,t.Nat64)),fee_collector_account:t.Opt(r),archive_options:t.Record({num_blocks_to_archive:t.Nat64,trigger_threshold:t.Nat64,max_message_size_bytes:t.Opt(t.Nat64),cycles_for_archive_creation:t.Opt(t.Nat64),node_max_memory_size_bytes:t.Opt(t.Nat64),controller_id:t.Principal}),token_name:t.Text}),N=t.Variant({Upgrade:t.Opt(i),Init:l}),s=t.Nat,d=t.Record({start:s,length:t.Nat}),m=t.Vec(t.Tuple(t.Text,a));a.fill(t.Variant({Int:t.Int,Map:m,Nat:t.Nat,Nat64:t.Nat64,Blob:t.Vec(t.Nat8),Text:t.Text,Array:t.Vec(a)}));let g=a,A=t.Record({blocks:t.Vec(g)}),k=t.Func([d],[A],["query"]),F=t.Record({certificate:t.Opt(t.Vec(t.Nat8)),first_index:s,blocks:t.Vec(g),chain_length:t.Nat64,archived_blocks:t.Vec(t.Record({callback:k,start:s,length:t.Nat}))}),v=t.Record({certificate:t.Opt(t.Vec(t.Nat8)),hash_tree:t.Vec(t.Nat8)}),u=t.Nat,x=t.Record({start:u,length:t.Nat}),O=t.Record({burn:t.Opt(t.Record({from:r,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat})),kind:t.Text,mint:t.Opt(t.Record({to:r,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat})),timestamp:t.Nat64,transfer:t.Opt(t.Record({to:r,fee:t.Opt(t.Nat),from:r,memo:t.Opt(t.Vec(t.Nat8)),created_at_time:t.Opt(t.Nat64),amount:t.Nat}))}),P=t.Record({transactions:t.Vec(O)}),S=t.Func([x],[P],["query"]),B=t.Record({first_index:u,log_length:t.Nat,transactions:t.Vec(O),archived_transactions:t.Vec(t.Record({callback:S,start:u,length:t.Nat}))}),o=t.Nat,G=t.Nat64,E=t.Record({to:r,fee:t.Opt(o),memo:t.Opt(t.Vec(t.Nat8)),from_subaccount:t.Opt(c),created_at_time:t.Opt(G),amount:o}),C=t.Variant({GenericError:t.Record({message:t.Text,error_code:t.Nat}),TemporarilyUnavailable:t.Null,BadBurn:t.Record({min_burn_amount:o}),Duplicate:t.Record({duplicate_of:s}),BadFee:t.Record({expected_fee:o}),CreatedInFuture:t.Record({ledger_time:t.Nat64}),TooOld:t.Null,InsufficientFunds:t.Record({balance:o})}),w=t.Variant({Ok:s,Err:C});return t.Service({get_blocks:t.Func([d],[F],["query"]),get_data_certificate:t.Func([],[v],["query"]),get_transactions:t.Func([x],[B],["query"]),icrc1_balance_of:t.Func([r],[o],["query"]),icrc1_decimals:t.Func([],[t.Nat8],["query"]),icrc1_fee:t.Func([],[o],["query"]),icrc1_metadata:t.Func([],[t.Vec(t.Tuple(t.Text,e))],["query"]),icrc1_minting_account:t.Func([],[t.Opt(r)],["query"]),icrc1_name:t.Func([],[t.Text],["query"]),icrc1_supported_standards:t.Func([],[t.Vec(t.Record({url:t.Text,name:t.Text}))],["query"]),icrc1_symbol:t.Func([],[t.Text],["query"]),icrc1_total_supply:t.Func([],[o],["query"]),icrc1_transfer:t.Func([E],[w],[])})};var R=require("@dfinity/utils"),$=({to:t,from_subaccount:a,fee:e,amount:c,created_at_time:r,memo:n})=>({to:t,amount:c,fee:(0,R.toNullable)(e),memo:(0,R.toNullable)(n),from_subaccount:(0,R.toNullable)(a),created_at_time:(0,R.toNullable)(r)});var T=class extends f.Canister{constructor(){super(...arguments);this.metadata=e=>this.caller(e).icrc1_metadata();this.transactionFee=e=>this.caller(e).icrc1_fee();this.balance=e=>this.caller({certified:e.certified}).icrc1_balance_of({owner:e.owner,subaccount:(0,f.toNullable)(e.subaccount)});this.transfer=async e=>{let c=await this.caller({certified:!0}).icrc1_transfer($(e));if("Err"in c)throw new V({errorType:c.Err,msg:"Failed to transfer"});return c.Ok};this.totalTokensSupply=e=>this.caller(e).icrc1_total_supply()}static create(e){let{service:c,certifiedService:r,canisterId:n}=(0,f.createServices)({options:e,idlFactory:Z,certifiedIdlFactory:W});return new T(n,c,r)}};var X=(n=>(n.SYMBOL="icrc1:symbol",n.NAME="icrc1:name",n.DECIMALS="icrc1:decimals",n.FEE="icrc1:fee",n.LOGO="icrc1:logo",n))(X||{});var M=require("@dfinity/principal"),p=require("@dfinity/utils"),et=64,rt=({owner:t,subaccount:a})=>{if((0,p.isNullish)(a))return t.toText();let c=(r=>r.replace(/^0+/,""))((0,p.uint8ArrayToHexString)(a));return c.length===0?t.toText():`${t.toText()}-${j({owner:t,subaccount:a})}.${c}`},j=({owner:t,subaccount:a})=>{let e=(0,p.bigEndianCrc32)(Uint8Array.from([...t.toUint8Array(),...a]));return(0,p.encodeBase32)(e)},ct=t=>{let[a,e]=t.split(".");if(!(0,p.notEmptyString)(a))throw new Error("Invalid account. No string provided.");if((0,p.isNullish)(e))return{owner:M.Principal.fromText(t)};let[c,...r]=a.split("-").reverse(),n=r.reverse().join("-"),i={owner:M.Principal.fromText(n),subaccount:(0,p.hexStringToUint8Array)(e.padStart(et,"0"))};if(j(i)!==c)throw new Error("Invalid account. Invalid checksum.");return i};var h=require("@dfinity/utils"),at=t=>{let a=/^([a-zA-Z]+):([A-Za-z0-9:\-.]+).*?(?:[?&](?:amount|value)=(\d+(?:\.\d+)?))?$/,e=t.match(a);if((0,h.isNullish)(e))return;let[c,r,n,i]=e;return{token:r,identifier:n,...(0,h.nonNullish)(i)&&!isNaN(parseFloat(i))&&{amount:parseFloat(i)}}};0&&(module.exports={IcrcIndexCanister,IcrcLedgerCanister,IcrcMetadataResponseEntries,IcrcTransferError,IndexError,decodeIcrcAccount,decodePayment,encodeIcrcAccount});
//# sourceMappingURL=index.cjs.js.map
