{
  "version": 3,
  "sources": ["../../src/index.canister.ts", "../../candid/icrc1_index.certified.idl.js", "../../candid/icrc1_index.idl.js", "../../src/converters/index.converters.ts", "../../src/errors/index.errors.ts"],
  "sourcesContent": ["import { Canister, createServices } from \"@dfinity/utils\";\nimport type {\n  GetTransactions,\n  _SERVICE as IcrcIndexService,\n} from \"../candid/icrc1_index\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/icrc1_index.certified.idl\";\nimport { idlFactory } from \"../candid/icrc1_index.idl\";\nimport { toGetTransactionsArgs } from \"./converters/index.converters\";\nimport { IndexError } from \"./errors/index.errors\";\nimport type { IcrcLedgerCanisterOptions } from \"./types/canister.options\";\nimport type { GetAccountTransactionsParams } from \"./types/index.params\";\n\nexport class IcrcIndexCanister extends Canister<IcrcIndexService> {\n  static create(options: IcrcLedgerCanisterOptions<IcrcIndexService>) {\n    const { service, certifiedService, canisterId } =\n      createServices<IcrcIndexService>({\n        options,\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    return new IcrcIndexCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * Get the transactions of an account\n   *\n   * Always certified.\n   * `get_account_transactions` needs to be called with an update\n   * because the index canisters makes a call to the ledger canister to get the transaction data.\n   * Index Canister only holds the transactions ids in state, not the whole transaction data.\n   */\n  getTransactions = async (\n    params: GetAccountTransactionsParams,\n  ): Promise<GetTransactions> => {\n    const response = await this.caller({\n      certified: true,\n    }).get_account_transactions(toGetTransactionsArgs(params));\n\n    if (\"Err\" in response) {\n      throw new IndexError(response.Err.message);\n    }\n\n    return response.Ok;\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger/candid/icrc1_index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArgs = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const TxId = IDL.Nat;\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(TxId),\n    'account' : Account,\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(\n      IDL.Record({\n        'from' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(\n      IDL.Record({\n        'to' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n    'timestamp' : IDL.Nat64,\n    'transfer' : IDL.Opt(\n      IDL.Record({\n        'to' : Account,\n        'fee' : IDL.Opt(IDL.Nat),\n        'from' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : TxId,\n    'transaction' : Transaction,\n  });\n  const GetTransactions = IDL.Record({\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(TxId),\n  });\n  const GetTransactionsErr = IDL.Record({ 'message' : IDL.Text });\n  const GetTransactionsResult = IDL.Variant({\n    'Ok' : GetTransactions,\n    'Err' : GetTransactionsErr,\n  });\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const ListSubaccountsArgs = IDL.Record({\n    'owner' : IDL.Principal,\n    'start' : IDL.Opt(SubAccount),\n  });\n  return IDL.Service({\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetTransactionsResult],\n        [],\n      ),\n    'ledger_id' : IDL.Func([], [IDL.Principal], []),\n    'list_subaccounts' : IDL.Func(\n        [ListSubaccountsArgs],\n        [IDL.Vec(SubAccount)],\n        [],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArgs = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArgs];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger/candid/icrc1_index.did */\nexport const idlFactory = ({ IDL }) => {\n  const InitArgs = IDL.Record({ 'ledger_id' : IDL.Principal });\n  const TxId = IDL.Nat;\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const GetAccountTransactionsArgs = IDL.Record({\n    'max_results' : IDL.Nat,\n    'start' : IDL.Opt(TxId),\n    'account' : Account,\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(\n      IDL.Record({\n        'from' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(\n      IDL.Record({\n        'to' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n    'timestamp' : IDL.Nat64,\n    'transfer' : IDL.Opt(\n      IDL.Record({\n        'to' : Account,\n        'fee' : IDL.Opt(IDL.Nat),\n        'from' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n  });\n  const TransactionWithId = IDL.Record({\n    'id' : TxId,\n    'transaction' : Transaction,\n  });\n  const GetTransactions = IDL.Record({\n    'transactions' : IDL.Vec(TransactionWithId),\n    'oldest_tx_id' : IDL.Opt(TxId),\n  });\n  const GetTransactionsErr = IDL.Record({ 'message' : IDL.Text });\n  const GetTransactionsResult = IDL.Variant({\n    'Ok' : GetTransactions,\n    'Err' : GetTransactionsErr,\n  });\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const ListSubaccountsArgs = IDL.Record({\n    'owner' : IDL.Principal,\n    'start' : IDL.Opt(SubAccount),\n  });\n  return IDL.Service({\n    'get_account_transactions' : IDL.Func(\n        [GetAccountTransactionsArgs],\n        [GetTransactionsResult],\n        [],\n      ),\n    'ledger_id' : IDL.Func([], [IDL.Principal], ['query']),\n    'list_subaccounts' : IDL.Func(\n        [ListSubaccountsArgs],\n        [IDL.Vec(SubAccount)],\n        ['query'],\n      ),\n  });\n};\nexport const init = ({ IDL }) => {\n  const InitArgs = IDL.Record({ 'ledger_id' : IDL.Principal });\n  return [InitArgs];\n};\n", "import { toNullable } from \"@dfinity/utils\";\nimport type {\n  Account,\n  GetAccountTransactionsArgs,\n} from \"../../candid/icrc1_index\";\nimport type { GetAccountTransactionsParams } from \"../types/index.params\";\nimport type { IcrcAccount } from \"../types/ledger.responses\";\n\nconst toCandidAccount = ({ owner, subaccount }: IcrcAccount): Account => ({\n  owner,\n  subaccount: toNullable(subaccount),\n});\n\nexport const toGetTransactionsArgs = ({\n  account,\n  max_results,\n  start,\n}: GetAccountTransactionsParams): GetAccountTransactionsArgs => ({\n  account: toCandidAccount(account),\n  max_results,\n  start: toNullable(start),\n});\n", "export class IndexError extends Error {}\n"],
  "mappings": "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",
  "names": ["Canister", "createServices", "idlFactory", "IDL", "InitArgs", "TxId", "Account", "GetAccountTransactionsArgs", "Transaction", "TransactionWithId", "GetTransactions", "GetTransactionsErr", "GetTransactionsResult", "SubAccount", "ListSubaccountsArgs", "idlFactory", "IDL", "InitArgs", "TxId", "Account", "GetAccountTransactionsArgs", "Transaction", "TransactionWithId", "GetTransactions", "GetTransactionsErr", "GetTransactionsResult", "SubAccount", "ListSubaccountsArgs", "toNullable", "toCandidAccount", "owner", "subaccount", "toGetTransactionsArgs", "account", "max_results", "start", "IndexError", "IcrcIndexCanister", "Canister", "options", "service", "certifiedService", "canisterId", "createServices", "idlFactory", "params", "response", "toGetTransactionsArgs", "IndexError"]
}
