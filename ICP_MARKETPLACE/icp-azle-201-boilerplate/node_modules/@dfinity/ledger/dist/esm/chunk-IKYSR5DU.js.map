{
  "version": 3,
  "sources": ["../../src/ledger.canister.ts", "../../candid/icrc1_ledger.certified.idl.js", "../../candid/icrc1_ledger.idl.js", "../../src/converters/ledger.converters.ts", "../../src/errors/ledger.errors.ts"],
  "sourcesContent": ["import type { QueryParams } from \"@dfinity/utils\";\nimport { Canister, createServices, toNullable } from \"@dfinity/utils\";\nimport type {\n  BlockIndex,\n  Tokens,\n  _SERVICE as IcrcLedgerService,\n} from \"../candid/icrc1_ledger\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/icrc1_ledger.certified.idl\";\nimport { idlFactory } from \"../candid/icrc1_ledger.idl\";\nimport { toTransferArg } from \"./converters/ledger.converters\";\nimport { IcrcTransferError } from \"./errors/ledger.errors\";\nimport type { IcrcLedgerCanisterOptions } from \"./types/canister.options\";\nimport type { BalanceParams, TransferParams } from \"./types/ledger.params\";\nimport type { IcrcTokenMetadataResponse } from \"./types/ledger.responses\";\n\nexport class IcrcLedgerCanister extends Canister<IcrcLedgerService> {\n  static create(options: IcrcLedgerCanisterOptions<IcrcLedgerService>) {\n    const { service, certifiedService, canisterId } =\n      createServices<IcrcLedgerService>({\n        options,\n        idlFactory,\n        certifiedIdlFactory,\n      });\n\n    return new IcrcLedgerCanister(canisterId, service, certifiedService);\n  }\n\n  /**\n   * The token metadata (name, symbol, etc.).\n   */\n  metadata = (params: QueryParams): Promise<IcrcTokenMetadataResponse> =>\n    this.caller(params).icrc1_metadata();\n\n  /**\n   * The ledger transaction fees.\n   *\n   * @returns {Tokens} The ledger transaction fees in Tokens\n   */\n  transactionFee = (params: QueryParams): Promise<Tokens> =>\n    this.caller(params).icrc1_fee();\n\n  /**\n   * Returns the balance for a given account provided as owner and with optional subaccount.\n   *\n   * @param {BalanceParams} params The parameters to get the balance of an account.\n   * @returns {Promise<Tokens>} The balance of the given account.\n   */\n  balance = (params: BalanceParams): Promise<Tokens> =>\n    this.caller({ certified: params.certified }).icrc1_balance_of({\n      owner: params.owner,\n      subaccount: toNullable(params.subaccount),\n    });\n\n  /**\n   * Transfers tokens from the sender to the given account.\n   *\n   * @param {TransferArg} params The parameters to transfer tokens.\n   *\n   * @throws {IcrcTransferError} If the transfer fails.\n   */\n  transfer = async (params: TransferParams): Promise<BlockIndex> => {\n    const response = await this.caller({ certified: true }).icrc1_transfer(\n      toTransferArg(params),\n    );\n    if (\"Err\" in response) {\n      throw new IcrcTransferError({\n        errorType: response.Err,\n        msg: \"Failed to transfer\",\n      });\n    }\n    return response.Ok;\n  };\n\n  /**\n   * Returns the total supply of tokens.\n   */\n  totalTokensSupply = (params: QueryParams): Promise<Tokens> => {\n    return this.caller(params).icrc1_total_supply();\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger/candid/icrc1_ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const Value = IDL.Rec();\n  const MetadataValue = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const ChangeFeeCollector = IDL.Variant({\n    'SetTo' : Account,\n    'Unset' : IDL.Null,\n  });\n  const UpgradeArgs = IDL.Record({\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(IDL.Nat64),\n    'metadata' : IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))),\n    'change_fee_collector' : IDL.Opt(ChangeFeeCollector),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const InitArgs = IDL.Record({\n    'token_symbol' : IDL.Text,\n    'transfer_fee' : IDL.Nat64,\n    'metadata' : IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue)),\n    'minting_account' : Account,\n    'initial_balances' : IDL.Vec(IDL.Tuple(Account, IDL.Nat64)),\n    'fee_collector_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Record({\n      'num_blocks_to_archive' : IDL.Nat64,\n      'trigger_threshold' : IDL.Nat64,\n      'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n      'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n      'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n      'controller_id' : IDL.Principal,\n    }),\n    'token_name' : IDL.Text,\n  });\n  const LedgerArg = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const BlockIndex = IDL.Nat;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat,\n  });\n  const Map = IDL.Vec(IDL.Tuple(IDL.Text, Value));\n  Value.fill(\n    IDL.Variant({\n      'Int' : IDL.Int,\n      'Map' : Map,\n      'Nat' : IDL.Nat,\n      'Nat64' : IDL.Nat64,\n      'Blob' : IDL.Vec(IDL.Nat8),\n      'Text' : IDL.Text,\n      'Array' : IDL.Vec(Value),\n    })\n  );\n  const Block = Value;\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryBlockArchiveFn = IDL.Func([GetBlocksArgs], [BlockRange], []);\n  const GetBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'first_index' : BlockIndex,\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryBlockArchiveFn,\n        'start' : BlockIndex,\n        'length' : IDL.Nat,\n      })\n    ),\n  });\n  const DataCertificate = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'hash_tree' : IDL.Vec(IDL.Nat8),\n  });\n  const TxIndex = IDL.Nat;\n  const GetTransactionsRequest = IDL.Record({\n    'start' : TxIndex,\n    'length' : IDL.Nat,\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(\n      IDL.Record({\n        'from' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(\n      IDL.Record({\n        'to' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n    'timestamp' : IDL.Nat64,\n    'transfer' : IDL.Opt(\n      IDL.Record({\n        'to' : Account,\n        'fee' : IDL.Opt(IDL.Nat),\n        'from' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n  });\n  const TransactionRange = IDL.Record({\n    'transactions' : IDL.Vec(Transaction),\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetTransactionsRequest],\n      [TransactionRange],\n      [],\n    );\n  const GetTransactionsResponse = IDL.Record({\n    'first_index' : TxIndex,\n    'log_length' : IDL.Nat,\n    'transactions' : IDL.Vec(Transaction),\n    'archived_transactions' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryArchiveFn,\n        'start' : TxIndex,\n        'length' : IDL.Nat,\n      })\n    ),\n  });\n  const Tokens = IDL.Nat;\n  const Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(Subaccount),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  return IDL.Service({\n    'get_blocks' : IDL.Func([GetBlocksArgs], [GetBlocksResponse], []),\n    'get_data_certificate' : IDL.Func([], [DataCertificate], []),\n    'get_transactions' : IDL.Func(\n        [GetTransactionsRequest],\n        [GetTransactionsResponse],\n        [],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Tokens], []),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], []),\n    'icrc1_fee' : IDL.Func([], [Tokens], []),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))],\n        [],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], []),\n    'icrc1_name' : IDL.Func([], [IDL.Text], []),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        [],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], []),\n    'icrc1_total_supply' : IDL.Func([], [Tokens], []),\n    'icrc1_transfer' : IDL.Func([TransferArg], [TransferResult], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const MetadataValue = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const ChangeFeeCollector = IDL.Variant({\n    'SetTo' : Account,\n    'Unset' : IDL.Null,\n  });\n  const UpgradeArgs = IDL.Record({\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(IDL.Nat64),\n    'metadata' : IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))),\n    'change_fee_collector' : IDL.Opt(ChangeFeeCollector),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const InitArgs = IDL.Record({\n    'token_symbol' : IDL.Text,\n    'transfer_fee' : IDL.Nat64,\n    'metadata' : IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue)),\n    'minting_account' : Account,\n    'initial_balances' : IDL.Vec(IDL.Tuple(Account, IDL.Nat64)),\n    'fee_collector_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Record({\n      'num_blocks_to_archive' : IDL.Nat64,\n      'trigger_threshold' : IDL.Nat64,\n      'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n      'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n      'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n      'controller_id' : IDL.Principal,\n    }),\n    'token_name' : IDL.Text,\n  });\n  const LedgerArg = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerArg];\n};\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/ledger/candid/icrc1_ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const Value = IDL.Rec();\n  const MetadataValue = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const ChangeFeeCollector = IDL.Variant({\n    'SetTo' : Account,\n    'Unset' : IDL.Null,\n  });\n  const UpgradeArgs = IDL.Record({\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(IDL.Nat64),\n    'metadata' : IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))),\n    'change_fee_collector' : IDL.Opt(ChangeFeeCollector),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const InitArgs = IDL.Record({\n    'token_symbol' : IDL.Text,\n    'transfer_fee' : IDL.Nat64,\n    'metadata' : IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue)),\n    'minting_account' : Account,\n    'initial_balances' : IDL.Vec(IDL.Tuple(Account, IDL.Nat64)),\n    'fee_collector_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Record({\n      'num_blocks_to_archive' : IDL.Nat64,\n      'trigger_threshold' : IDL.Nat64,\n      'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n      'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n      'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n      'controller_id' : IDL.Principal,\n    }),\n    'token_name' : IDL.Text,\n  });\n  const LedgerArg = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  const BlockIndex = IDL.Nat;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat,\n  });\n  const Map = IDL.Vec(IDL.Tuple(IDL.Text, Value));\n  Value.fill(\n    IDL.Variant({\n      'Int' : IDL.Int,\n      'Map' : Map,\n      'Nat' : IDL.Nat,\n      'Nat64' : IDL.Nat64,\n      'Blob' : IDL.Vec(IDL.Nat8),\n      'Text' : IDL.Text,\n      'Array' : IDL.Vec(Value),\n    })\n  );\n  const Block = Value;\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryBlockArchiveFn = IDL.Func(\n      [GetBlocksArgs],\n      [BlockRange],\n      ['query'],\n    );\n  const GetBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'first_index' : BlockIndex,\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'archived_blocks' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryBlockArchiveFn,\n        'start' : BlockIndex,\n        'length' : IDL.Nat,\n      })\n    ),\n  });\n  const DataCertificate = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'hash_tree' : IDL.Vec(IDL.Nat8),\n  });\n  const TxIndex = IDL.Nat;\n  const GetTransactionsRequest = IDL.Record({\n    'start' : TxIndex,\n    'length' : IDL.Nat,\n  });\n  const Transaction = IDL.Record({\n    'burn' : IDL.Opt(\n      IDL.Record({\n        'from' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n    'kind' : IDL.Text,\n    'mint' : IDL.Opt(\n      IDL.Record({\n        'to' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n    'timestamp' : IDL.Nat64,\n    'transfer' : IDL.Opt(\n      IDL.Record({\n        'to' : Account,\n        'fee' : IDL.Opt(IDL.Nat),\n        'from' : Account,\n        'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n        'created_at_time' : IDL.Opt(IDL.Nat64),\n        'amount' : IDL.Nat,\n      })\n    ),\n  });\n  const TransactionRange = IDL.Record({\n    'transactions' : IDL.Vec(Transaction),\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetTransactionsRequest],\n      [TransactionRange],\n      ['query'],\n    );\n  const GetTransactionsResponse = IDL.Record({\n    'first_index' : TxIndex,\n    'log_length' : IDL.Nat,\n    'transactions' : IDL.Vec(Transaction),\n    'archived_transactions' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryArchiveFn,\n        'start' : TxIndex,\n        'length' : IDL.Nat,\n      })\n    ),\n  });\n  const Tokens = IDL.Nat;\n  const Timestamp = IDL.Nat64;\n  const TransferArg = IDL.Record({\n    'to' : Account,\n    'fee' : IDL.Opt(Tokens),\n    'memo' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'from_subaccount' : IDL.Opt(Subaccount),\n    'created_at_time' : IDL.Opt(Timestamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'GenericError' : IDL.Record({\n      'message' : IDL.Text,\n      'error_code' : IDL.Nat,\n    }),\n    'TemporarilyUnavailable' : IDL.Null,\n    'BadBurn' : IDL.Record({ 'min_burn_amount' : Tokens }),\n    'Duplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'CreatedInFuture' : IDL.Record({ 'ledger_time' : IDL.Nat64 }),\n    'TooOld' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  return IDL.Service({\n    'get_blocks' : IDL.Func([GetBlocksArgs], [GetBlocksResponse], ['query']),\n    'get_data_certificate' : IDL.Func([], [DataCertificate], ['query']),\n    'get_transactions' : IDL.Func(\n        [GetTransactionsRequest],\n        [GetTransactionsResponse],\n        ['query'],\n      ),\n    'icrc1_balance_of' : IDL.Func([Account], [Tokens], ['query']),\n    'icrc1_decimals' : IDL.Func([], [IDL.Nat8], ['query']),\n    'icrc1_fee' : IDL.Func([], [Tokens], ['query']),\n    'icrc1_metadata' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))],\n        ['query'],\n      ),\n    'icrc1_minting_account' : IDL.Func([], [IDL.Opt(Account)], ['query']),\n    'icrc1_name' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_supported_standards' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Record({ 'url' : IDL.Text, 'name' : IDL.Text }))],\n        ['query'],\n      ),\n    'icrc1_symbol' : IDL.Func([], [IDL.Text], ['query']),\n    'icrc1_total_supply' : IDL.Func([], [Tokens], ['query']),\n    'icrc1_transfer' : IDL.Func([TransferArg], [TransferResult], []),\n  });\n};\nexport const init = ({ IDL }) => {\n  const MetadataValue = IDL.Variant({\n    'Int' : IDL.Int,\n    'Nat' : IDL.Nat,\n    'Blob' : IDL.Vec(IDL.Nat8),\n    'Text' : IDL.Text,\n  });\n  const Subaccount = IDL.Vec(IDL.Nat8);\n  const Account = IDL.Record({\n    'owner' : IDL.Principal,\n    'subaccount' : IDL.Opt(Subaccount),\n  });\n  const ChangeFeeCollector = IDL.Variant({\n    'SetTo' : Account,\n    'Unset' : IDL.Null,\n  });\n  const UpgradeArgs = IDL.Record({\n    'token_symbol' : IDL.Opt(IDL.Text),\n    'transfer_fee' : IDL.Opt(IDL.Nat64),\n    'metadata' : IDL.Opt(IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue))),\n    'change_fee_collector' : IDL.Opt(ChangeFeeCollector),\n    'max_memo_length' : IDL.Opt(IDL.Nat16),\n    'token_name' : IDL.Opt(IDL.Text),\n  });\n  const InitArgs = IDL.Record({\n    'token_symbol' : IDL.Text,\n    'transfer_fee' : IDL.Nat64,\n    'metadata' : IDL.Vec(IDL.Tuple(IDL.Text, MetadataValue)),\n    'minting_account' : Account,\n    'initial_balances' : IDL.Vec(IDL.Tuple(Account, IDL.Nat64)),\n    'fee_collector_account' : IDL.Opt(Account),\n    'archive_options' : IDL.Record({\n      'num_blocks_to_archive' : IDL.Nat64,\n      'trigger_threshold' : IDL.Nat64,\n      'max_message_size_bytes' : IDL.Opt(IDL.Nat64),\n      'cycles_for_archive_creation' : IDL.Opt(IDL.Nat64),\n      'node_max_memory_size_bytes' : IDL.Opt(IDL.Nat64),\n      'controller_id' : IDL.Principal,\n    }),\n    'token_name' : IDL.Text,\n  });\n  const LedgerArg = IDL.Variant({\n    'Upgrade' : IDL.Opt(UpgradeArgs),\n    'Init' : InitArgs,\n  });\n  return [LedgerArg];\n};\n", "import { toNullable } from \"@dfinity/utils\";\nimport type { TransferArg } from \"../../candid/icrc1_ledger\";\nimport type { TransferParams } from \"../types/ledger.params\";\n\nexport const toTransferArg = ({\n  to,\n  from_subaccount,\n  fee,\n  amount,\n  created_at_time,\n  memo,\n}: TransferParams): TransferArg => ({\n  to,\n  amount,\n  fee: toNullable(fee),\n  memo: toNullable(memo),\n  from_subaccount: toNullable(from_subaccount),\n  created_at_time: toNullable(created_at_time),\n});\n", "import type { TransferError } from \"../../candid/icrc1_ledger\";\n\nexport class IcrcTransferError extends Error {\n  public errorType: TransferError;\n  constructor({ msg, errorType }: { msg?: string; errorType: TransferError }) {\n    super(msg);\n    this.errorType = errorType;\n  }\n}\n"],
  "mappings": "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",
  "names": ["Canister", "createServices", "toNullable", "idlFactory", "IDL", "Value", "MetadataValue", "Subaccount", "Account", "ChangeFeeCollector", "UpgradeArgs", "InitArgs", "LedgerArg", "BlockIndex", "GetBlocksArgs", "Map", "Block", "BlockRange", "QueryBlockArchiveFn", "GetBlocksResponse", "DataCertificate", "TxIndex", "GetTransactionsRequest", "Transaction", "TransactionRange", "QueryArchiveFn", "GetTransactionsResponse", "Tokens", "Timestamp", "TransferArg", "TransferError", "TransferResult", "idlFactory", "IDL", "Value", "MetadataValue", "Subaccount", "Account", "ChangeFeeCollector", "UpgradeArgs", "InitArgs", "LedgerArg", "BlockIndex", "GetBlocksArgs", "Map", "Block", "BlockRange", "QueryBlockArchiveFn", "GetBlocksResponse", "DataCertificate", "TxIndex", "GetTransactionsRequest", "Transaction", "TransactionRange", "QueryArchiveFn", "GetTransactionsResponse", "Tokens", "Timestamp", "TransferArg", "TransferError", "TransferResult", "toNullable", "toTransferArg", "to", "from_subaccount", "fee", "amount", "created_at_time", "memo", "IcrcTransferError", "msg", "errorType", "IcrcLedgerCanister", "Canister", "options", "service", "certifiedService", "canisterId", "createServices", "idlFactory", "params", "toNullable", "response", "toTransferArg", "IcrcTransferError"]
}
