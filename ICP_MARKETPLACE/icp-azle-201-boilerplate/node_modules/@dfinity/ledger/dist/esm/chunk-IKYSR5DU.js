import{Canister as C,createServices as E,toNullable as U}from"@dfinity/utils";var B=({IDL:e})=>{let t=e.Rec(),r=e.Variant({Int:e.Int,Nat:e.Nat,Blob:e.Vec(e.Nat8),Text:e.Text}),o=e.Vec(e.Nat8),a=e.Record({owner:e.Principal,subaccount:e.Opt(o)}),i=e.Variant({SetTo:a,Unset:e.Null}),T=e.Record({token_symbol:e.Opt(e.Text),transfer_fee:e.Opt(e.Nat64),metadata:e.Opt(e.Vec(e.Tuple(e.Text,r))),change_fee_collector:e.Opt(i),max_memo_length:e.Opt(e.Nat16),token_name:e.Opt(e.Text)}),f=e.Record({token_symbol:e.Text,transfer_fee:e.Nat64,metadata:e.Vec(e.Tuple(e.Text,r)),minting_account:a,initial_balances:e.Vec(e.Tuple(a,e.Nat64)),fee_collector_account:e.Opt(a),archive_options:e.Record({num_blocks_to_archive:e.Nat64,trigger_threshold:e.Nat64,max_message_size_bytes:e.Opt(e.Nat64),cycles_for_archive_creation:e.Opt(e.Nat64),node_max_memory_size_bytes:e.Opt(e.Nat64),controller_id:e.Principal}),token_name:e.Text}),q=e.Variant({Upgrade:e.Opt(T),Init:f}),n=e.Nat,l=e.Record({start:n,length:e.Nat}),g=e.Vec(e.Tuple(e.Text,t));t.fill(e.Variant({Int:e.Int,Map:g,Nat:e.Nat,Nat64:e.Nat64,Blob:e.Vec(e.Nat8),Text:e.Text,Array:e.Vec(t)}));let _=t,O=e.Record({blocks:e.Vec(_)}),x=e.Func([l],[O],[]),V=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),first_index:n,blocks:e.Vec(_),chain_length:e.Nat64,archived_blocks:e.Vec(e.Record({callback:x,start:n,length:e.Nat}))}),y=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),hash_tree:e.Vec(e.Nat8)}),s=e.Nat,p=e.Record({start:s,length:e.Nat}),d=e.Record({burn:e.Opt(e.Record({from:a,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(e.Nat64),amount:e.Nat})),kind:e.Text,mint:e.Opt(e.Record({to:a,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(e.Nat64),amount:e.Nat})),timestamp:e.Nat64,transfer:e.Opt(e.Record({to:a,fee:e.Opt(e.Nat),from:a,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(e.Nat64),amount:e.Nat}))}),R=e.Record({transactions:e.Vec(d)}),b=e.Func([p],[R],[]),h=e.Record({first_index:s,log_length:e.Nat,transactions:e.Vec(d),archived_transactions:e.Vec(e.Record({callback:b,start:s,length:e.Nat}))}),c=e.Nat,k=e.Nat64,F=e.Record({to:a,fee:e.Opt(c),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(o),created_at_time:e.Opt(k),amount:c}),A=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,BadBurn:e.Record({min_burn_amount:c}),Duplicate:e.Record({duplicate_of:n}),BadFee:e.Record({expected_fee:c}),CreatedInFuture:e.Record({ledger_time:e.Nat64}),TooOld:e.Null,InsufficientFunds:e.Record({balance:c})}),v=e.Variant({Ok:n,Err:A});return e.Service({get_blocks:e.Func([l],[V],[]),get_data_certificate:e.Func([],[y],[]),get_transactions:e.Func([p],[h],[]),icrc1_balance_of:e.Func([a],[c],[]),icrc1_decimals:e.Func([],[e.Nat8],[]),icrc1_fee:e.Func([],[c],[]),icrc1_metadata:e.Func([],[e.Vec(e.Tuple(e.Text,r))],[]),icrc1_minting_account:e.Func([],[e.Opt(a)],[]),icrc1_name:e.Func([],[e.Text],[]),icrc1_supported_standards:e.Func([],[e.Vec(e.Record({url:e.Text,name:e.Text}))],[]),icrc1_symbol:e.Func([],[e.Text],[]),icrc1_total_supply:e.Func([],[c],[]),icrc1_transfer:e.Func([F],[v],[])})};var P=({IDL:e})=>{let t=e.Rec(),r=e.Variant({Int:e.Int,Nat:e.Nat,Blob:e.Vec(e.Nat8),Text:e.Text}),o=e.Vec(e.Nat8),a=e.Record({owner:e.Principal,subaccount:e.Opt(o)}),i=e.Variant({SetTo:a,Unset:e.Null}),T=e.Record({token_symbol:e.Opt(e.Text),transfer_fee:e.Opt(e.Nat64),metadata:e.Opt(e.Vec(e.Tuple(e.Text,r))),change_fee_collector:e.Opt(i),max_memo_length:e.Opt(e.Nat16),token_name:e.Opt(e.Text)}),f=e.Record({token_symbol:e.Text,transfer_fee:e.Nat64,metadata:e.Vec(e.Tuple(e.Text,r)),minting_account:a,initial_balances:e.Vec(e.Tuple(a,e.Nat64)),fee_collector_account:e.Opt(a),archive_options:e.Record({num_blocks_to_archive:e.Nat64,trigger_threshold:e.Nat64,max_message_size_bytes:e.Opt(e.Nat64),cycles_for_archive_creation:e.Opt(e.Nat64),node_max_memory_size_bytes:e.Opt(e.Nat64),controller_id:e.Principal}),token_name:e.Text}),q=e.Variant({Upgrade:e.Opt(T),Init:f}),n=e.Nat,l=e.Record({start:n,length:e.Nat}),g=e.Vec(e.Tuple(e.Text,t));t.fill(e.Variant({Int:e.Int,Map:g,Nat:e.Nat,Nat64:e.Nat64,Blob:e.Vec(e.Nat8),Text:e.Text,Array:e.Vec(t)}));let _=t,O=e.Record({blocks:e.Vec(_)}),x=e.Func([l],[O],["query"]),V=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),first_index:n,blocks:e.Vec(_),chain_length:e.Nat64,archived_blocks:e.Vec(e.Record({callback:x,start:n,length:e.Nat}))}),y=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),hash_tree:e.Vec(e.Nat8)}),s=e.Nat,p=e.Record({start:s,length:e.Nat}),d=e.Record({burn:e.Opt(e.Record({from:a,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(e.Nat64),amount:e.Nat})),kind:e.Text,mint:e.Opt(e.Record({to:a,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(e.Nat64),amount:e.Nat})),timestamp:e.Nat64,transfer:e.Opt(e.Record({to:a,fee:e.Opt(e.Nat),from:a,memo:e.Opt(e.Vec(e.Nat8)),created_at_time:e.Opt(e.Nat64),amount:e.Nat}))}),R=e.Record({transactions:e.Vec(d)}),b=e.Func([p],[R],["query"]),h=e.Record({first_index:s,log_length:e.Nat,transactions:e.Vec(d),archived_transactions:e.Vec(e.Record({callback:b,start:s,length:e.Nat}))}),c=e.Nat,k=e.Nat64,F=e.Record({to:a,fee:e.Opt(c),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(o),created_at_time:e.Opt(k),amount:c}),A=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,BadBurn:e.Record({min_burn_amount:c}),Duplicate:e.Record({duplicate_of:n}),BadFee:e.Record({expected_fee:c}),CreatedInFuture:e.Record({ledger_time:e.Nat64}),TooOld:e.Null,InsufficientFunds:e.Record({balance:c})}),v=e.Variant({Ok:n,Err:A});return e.Service({get_blocks:e.Func([l],[V],["query"]),get_data_certificate:e.Func([],[y],["query"]),get_transactions:e.Func([p],[h],["query"]),icrc1_balance_of:e.Func([a],[c],["query"]),icrc1_decimals:e.Func([],[e.Nat8],["query"]),icrc1_fee:e.Func([],[c],["query"]),icrc1_metadata:e.Func([],[e.Vec(e.Tuple(e.Text,r))],["query"]),icrc1_minting_account:e.Func([],[e.Opt(a)],["query"]),icrc1_name:e.Func([],[e.Text],["query"]),icrc1_supported_standards:e.Func([],[e.Vec(e.Record({url:e.Text,name:e.Text}))],["query"]),icrc1_symbol:e.Func([],[e.Text],["query"]),icrc1_total_supply:e.Func([],[c],["query"]),icrc1_transfer:e.Func([F],[v],[])})};import{toNullable as m}from"@dfinity/utils";var S=({to:e,from_subaccount:t,fee:r,amount:o,created_at_time:a,memo:i})=>({to:e,amount:o,fee:m(r),memo:m(i),from_subaccount:m(t),created_at_time:m(a)});var u=class extends Error{errorType;constructor({msg:t,errorType:r}){super(t),this.errorType=r}};var N=class extends C{static create(t){let{service:r,certifiedService:o,canisterId:a}=E({options:t,idlFactory:P,certifiedIdlFactory:B});return new N(a,r,o)}metadata=t=>this.caller(t).icrc1_metadata();transactionFee=t=>this.caller(t).icrc1_fee();balance=t=>this.caller({certified:t.certified}).icrc1_balance_of({owner:t.owner,subaccount:U(t.subaccount)});transfer=async t=>{let r=await this.caller({certified:!0}).icrc1_transfer(S(t));if("Err"in r)throw new u({errorType:r.Err,msg:"Failed to transfer"});return r.Ok};totalTokensSupply=t=>this.caller(t).icrc1_total_supply()};export{u as a,N as b};
//# sourceMappingURL=chunk-IKYSR5DU.js.map
