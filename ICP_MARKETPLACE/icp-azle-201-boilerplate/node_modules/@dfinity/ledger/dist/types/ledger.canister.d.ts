import type { QueryParams } from "@dfinity/utils";
import { Canister } from "@dfinity/utils";
import type { BlockIndex, Tokens, _SERVICE as IcrcLedgerService } from "../candid/icrc1_ledger";
import type { IcrcLedgerCanisterOptions } from "./types/canister.options";
import type { BalanceParams, TransferParams } from "./types/ledger.params";
import type { IcrcTokenMetadataResponse } from "./types/ledger.responses";
export declare class IcrcLedgerCanister extends Canister<IcrcLedgerService> {
    static create(options: IcrcLedgerCanisterOptions<IcrcLedgerService>): IcrcLedgerCanister;
    /**
     * The token metadata (name, symbol, etc.).
     */
    metadata: (params: QueryParams) => Promise<IcrcTokenMetadataResponse>;
    /**
     * The ledger transaction fees.
     *
     * @returns {Tokens} The ledger transaction fees in Tokens
     */
    transactionFee: (params: QueryParams) => Promise<Tokens>;
    /**
     * Returns the balance for a given account provided as owner and with optional subaccount.
     *
     * @param {BalanceParams} params The parameters to get the balance of an account.
     * @returns {Promise<Tokens>} The balance of the given account.
     */
    balance: (params: BalanceParams) => Promise<Tokens>;
    /**
     * Transfers tokens from the sender to the given account.
     *
     * @param {TransferArg} params The parameters to transfer tokens.
     *
     * @throws {IcrcTransferError} If the transfer fails.
     */
    transfer: (params: TransferParams) => Promise<BlockIndex>;
    /**
     * Returns the total supply of tokens.
     */
    totalTokensSupply: (params: QueryParams) => Promise<Tokens>;
}
