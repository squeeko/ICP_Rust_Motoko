import{polling as n}from"@dfinity/agent";var p=()=>import("@dfinity/nns-proto"),l=async({agent:o,canisterId:e,methodName:r,arg:s})=>{let t=await o.call(e,{methodName:r,arg:s,effectiveCanisterId:e});if(!t.response.ok)throw new Error(["Call failed:",`  Method: ${r}`,`  Canister ID: ${e}`,`  Request ID: ${t.requestId}`,`  HTTP status code: ${t.response.status}`,`  HTTP status text: ${t.response.statusText}`].join(`
`));let a=await n.pollForResponse(o,e,t.requestId,n.defaultStrategy());return new Uint8Array(a)},u=async({agent:o,canisterId:e,methodName:r,arg:s})=>{let t=await o.query(e,{methodName:r,arg:s});if(t.status=="rejected")throw new Error(["Call failed:",`  Method: ${r}`,`  Canister ID: ${e}`,`  HTTP status code: ${t.reject_code}`,`  HTTP status text: ${t.reject_message}`].join(`
`));return new Uint8Array(t.reply.arg)};export{p as a,l as b,u as c};
//# sourceMappingURL=chunk-FCMD5MHU.js.map
