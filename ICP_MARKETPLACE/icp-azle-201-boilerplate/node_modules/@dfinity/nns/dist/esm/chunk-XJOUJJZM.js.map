{
  "version": 3,
  "sources": ["../../src/icp.ts"],
  "sourcesContent": ["import type { ICPTs } from \"@dfinity/nns-proto\";\nimport {\n  convertStringToE8s,\n  ICPToken,\n  type FromStringToTokenError,\n  type Token,\n} from \"@dfinity/utils\";\nimport { importNnsProto } from \"./utils/proto.utils\";\n\n/**\n * We don't extend to keep `fromE8s` and `fromString` as backwards compatible.\n * @deprecated\n */\nexport class ICP {\n  private constructor(\n    private e8s: bigint,\n    public token: Token,\n  ) {}\n\n  public static fromE8s(amount: bigint): ICP {\n    return new ICP(amount, ICPToken);\n  }\n\n  /**\n   * Initialize from a string. Accepted formats:\n   *\n   * 1234567.8901\n   * 1'234'567.8901\n   * 1,234,567.8901\n   */\n  public static fromString(amount: string): ICP | FromStringToTokenError {\n    const e8s = convertStringToE8s(amount);\n    if (typeof e8s === \"bigint\") {\n      return new ICP(e8s, ICPToken);\n    }\n    return e8s;\n  }\n\n  public toE8s(): bigint {\n    return this.e8s;\n  }\n\n  public async toProto(): Promise<ICPTs> {\n    const { ICPTs: ICPTsConstructor } = await importNnsProto();\n\n    const proto = new ICPTsConstructor();\n    proto.setE8s(this.e8s.toString());\n    return proto;\n  }\n}\n"],
  "mappings": "wCACA,OACE,sBAAAA,EACA,YAAAC,MAGK,iBAOA,IAAMC,EAAN,KAAU,CACP,YACEC,EACDC,EACP,CAFQ,SAAAD,EACD,WAAAC,CACN,CAEH,OAAc,QAAQC,EAAqB,CACzC,OAAO,IAAIH,EAAIG,EAAQC,CAAQ,CACjC,CASA,OAAc,WAAWD,EAA8C,CACrE,IAAMF,EAAMI,EAAmBF,CAAM,EACrC,OAAI,OAAOF,GAAQ,SACV,IAAID,EAAIC,EAAKG,CAAQ,EAEvBH,CACT,CAEO,OAAgB,CACrB,OAAO,KAAK,GACd,CAEA,MAAa,SAA0B,CACrC,GAAM,CAAE,MAAOK,CAAiB,EAAI,MAAMC,EAAe,EAEnDC,EAAQ,IAAIF,EAClB,OAAAE,EAAM,OAAO,KAAK,IAAI,SAAS,CAAC,EACzBA,CACT,CACF",
  "names": ["convertStringToE8s", "ICPToken", "ICP", "e8s", "token", "amount", "ICPToken", "convertStringToE8s", "ICPTsConstructor", "importNnsProto", "proto"]
}
