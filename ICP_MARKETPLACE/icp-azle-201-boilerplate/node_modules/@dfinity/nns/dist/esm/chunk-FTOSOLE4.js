import{d as Y}from"./chunk-ZMUQLPST.js";import{createServices as D}from"@dfinity/utils";var Z=({IDL:e})=>{let r=e.Record({allowed_principals:e.Vec(e.Principal),access_controls_enabled:e.Bool,sns_subnet_ids:e.Vec(e.Principal)}),n=e.Record({wasm:e.Vec(e.Nat8),canister_type:e.Int32}),i=e.Record({hash:e.Vec(e.Nat8),wasm:e.Opt(n)}),s=e.Record({message:e.Text}),_=e.Variant({Error:s,Hash:e.Vec(e.Nat8)}),d=e.Record({result:e.Opt(_)}),l=e.Record({dissolve_delay_interval_seconds:e.Nat64,count:e.Nat64}),a=e.Record({id:e.Opt(e.Principal)}),u=e.Record({canisters:e.Vec(a)}),O=e.Record({nns_neuron_id:e.Nat64,amount_icp_e8s:e.Nat64}),R=e.Record({hotkey_principal:e.Text,cf_neurons:e.Vec(O)}),m=e.Record({participants:e.Vec(R)}),N=e.Record({total_e8s:e.Nat64}),o=e.Record({controller:e.Opt(e.Principal),dissolve_delay_seconds:e.Nat64,memo:e.Nat64,stake_e8s:e.Nat64,vesting_period_seconds:e.Opt(e.Nat64)}),w=e.Record({developer_neurons:e.Vec(o)}),P=e.Record({airdrop_neurons:e.Vec(o)}),V=e.Record({total_e8s:e.Nat64,initial_swap_amount_e8s:e.Nat64}),v=e.Record({treasury_distribution:e.Opt(N),developer_distribution:e.Opt(w),airdrop_distribution:e.Opt(P),swap_distribution:e.Opt(V)}),x=e.Variant({FractionalDeveloperVotingPower:v}),g=e.Record({iso_codes:e.Vec(e.Text)}),h=e.Record({url:e.Opt(e.Text),max_dissolve_delay_seconds:e.Opt(e.Nat64),max_dissolve_delay_bonus_percentage:e.Opt(e.Nat64),nns_proposal_id:e.Opt(e.Nat64),min_participant_icp_e8s:e.Opt(e.Nat64),neuron_basket_construction_parameters:e.Opt(l),fallback_controller_principal_ids:e.Vec(e.Text),token_symbol:e.Opt(e.Text),final_reward_rate_basis_points:e.Opt(e.Nat64),max_icp_e8s:e.Opt(e.Nat64),neuron_minimum_stake_e8s:e.Opt(e.Nat64),confirmation_text:e.Opt(e.Text),logo:e.Opt(e.Text),name:e.Opt(e.Text),swap_start_timestamp_seconds:e.Opt(e.Nat64),swap_due_timestamp_seconds:e.Opt(e.Nat64),initial_voting_period_seconds:e.Opt(e.Nat64),neuron_minimum_dissolve_delay_to_vote_seconds:e.Opt(e.Nat64),description:e.Opt(e.Text),max_neuron_age_seconds_for_age_bonus:e.Opt(e.Nat64),min_participants:e.Opt(e.Nat64),initial_reward_rate_basis_points:e.Opt(e.Nat64),wait_for_quiet_deadline_increase_seconds:e.Opt(e.Nat64),transaction_fee_e8s:e.Opt(e.Nat64),dapp_canisters:e.Opt(u),neurons_fund_participants:e.Opt(m),max_age_bonus_percentage:e.Opt(e.Nat64),initial_token_distribution:e.Opt(x),reward_rate_transition_duration_seconds:e.Opt(e.Nat64),token_logo:e.Opt(e.Text),token_name:e.Opt(e.Text),max_participant_icp_e8s:e.Opt(e.Nat64),proposal_reject_cost_e8s:e.Opt(e.Nat64),restricted_countries:e.Opt(g),min_icp_e8s:e.Opt(e.Nat64)}),S=e.Record({sns_init_payload:e.Opt(h)}),y=e.Record({restored_dapp_canisters:e.Vec(a),nns_controlled_dapp_canisters:e.Vec(a),sns_controlled_dapp_canisters:e.Vec(a)}),b=e.Record({root:e.Opt(e.Principal),swap:e.Opt(e.Principal),ledger:e.Opt(e.Principal),index:e.Opt(e.Principal),governance:e.Opt(e.Principal)}),T=e.Record({dapp_canisters_transfer_result:e.Opt(y),subnet_id:e.Opt(e.Principal),error:e.Opt(s),canisters:e.Opt(b)}),c=e.Record({allowed_principals:e.Vec(e.Principal)}),t=e.Record({archive_wasm_hash:e.Vec(e.Nat8),root_wasm_hash:e.Vec(e.Nat8),swap_wasm_hash:e.Vec(e.Nat8),ledger_wasm_hash:e.Vec(e.Nat8),governance_wasm_hash:e.Vec(e.Nat8),index_wasm_hash:e.Vec(e.Nat8)}),F=e.Record({governance_canister_id:e.Opt(e.Principal),current_version:e.Opt(t)}),f=e.Record({next_version:e.Opt(t)}),q=e.Record({sns_subnet_ids:e.Vec(e.Principal)}),C=e.Record({hash:e.Vec(e.Nat8)}),k=e.Record({wasm:e.Opt(n)}),U=e.Record({next_version:e.Opt(t),current_version:e.Opt(t)}),W=e.Record({upgrade_path:e.Vec(U),sns_governance_canister_id:e.Opt(e.Principal)}),A=e.Record({error:e.Opt(s)}),E=e.Record({root_canister_id:e.Opt(e.Principal),governance_canister_id:e.Opt(e.Principal),index_canister_id:e.Opt(e.Principal),swap_canister_id:e.Opt(e.Principal),ledger_canister_id:e.Opt(e.Principal)}),G=e.Record({instances:e.Vec(E)}),B=e.Record({limit:e.Nat32,starting_at:e.Opt(t),sns_governance_canister_id:e.Opt(e.Principal)}),j=e.Record({archive_wasm_hash:e.Text,root_wasm_hash:e.Text,swap_wasm_hash:e.Text,ledger_wasm_hash:e.Text,governance_wasm_hash:e.Text,index_wasm_hash:e.Text}),H=e.Record({pretty_version:e.Opt(j),version:e.Opt(t)}),M=e.Record({steps:e.Vec(H)}),z=e.Record({added_principals:e.Vec(e.Principal),removed_principals:e.Vec(e.Principal)}),J=e.Variant({Error:s,AllowedPrincipals:c}),K=e.Record({update_allowed_principals_result:e.Opt(J)}),Q=e.Record({sns_subnet_ids_to_add:e.Vec(e.Principal),sns_subnet_ids_to_remove:e.Vec(e.Principal)}),X=e.Record({error:e.Opt(s)});return e.Service({add_wasm:e.Func([i],[d],[]),deploy_new_sns:e.Func([S],[T],[]),get_allowed_principals:e.Func([e.Record({})],[c],[]),get_latest_sns_version_pretty:e.Func([e.Null],[e.Vec(e.Tuple(e.Text,e.Text))],[]),get_next_sns_version:e.Func([F],[f],[]),get_sns_subnet_ids:e.Func([e.Record({})],[q],[]),get_wasm:e.Func([C],[k],[]),insert_upgrade_path_entries:e.Func([W],[A],[]),list_deployed_snses:e.Func([e.Record({})],[G],[]),list_upgrade_steps:e.Func([B],[M],[]),update_allowed_principals:e.Func([z],[K],[]),update_sns_subnet_list:e.Func([Q],[X],[])})};var $=({IDL:e})=>{let r=e.Record({allowed_principals:e.Vec(e.Principal),access_controls_enabled:e.Bool,sns_subnet_ids:e.Vec(e.Principal)}),n=e.Record({wasm:e.Vec(e.Nat8),canister_type:e.Int32}),i=e.Record({hash:e.Vec(e.Nat8),wasm:e.Opt(n)}),s=e.Record({message:e.Text}),_=e.Variant({Error:s,Hash:e.Vec(e.Nat8)}),d=e.Record({result:e.Opt(_)}),l=e.Record({dissolve_delay_interval_seconds:e.Nat64,count:e.Nat64}),a=e.Record({id:e.Opt(e.Principal)}),u=e.Record({canisters:e.Vec(a)}),O=e.Record({nns_neuron_id:e.Nat64,amount_icp_e8s:e.Nat64}),R=e.Record({hotkey_principal:e.Text,cf_neurons:e.Vec(O)}),m=e.Record({participants:e.Vec(R)}),N=e.Record({total_e8s:e.Nat64}),o=e.Record({controller:e.Opt(e.Principal),dissolve_delay_seconds:e.Nat64,memo:e.Nat64,stake_e8s:e.Nat64,vesting_period_seconds:e.Opt(e.Nat64)}),w=e.Record({developer_neurons:e.Vec(o)}),P=e.Record({airdrop_neurons:e.Vec(o)}),V=e.Record({total_e8s:e.Nat64,initial_swap_amount_e8s:e.Nat64}),v=e.Record({treasury_distribution:e.Opt(N),developer_distribution:e.Opt(w),airdrop_distribution:e.Opt(P),swap_distribution:e.Opt(V)}),x=e.Variant({FractionalDeveloperVotingPower:v}),g=e.Record({iso_codes:e.Vec(e.Text)}),h=e.Record({url:e.Opt(e.Text),max_dissolve_delay_seconds:e.Opt(e.Nat64),max_dissolve_delay_bonus_percentage:e.Opt(e.Nat64),nns_proposal_id:e.Opt(e.Nat64),min_participant_icp_e8s:e.Opt(e.Nat64),neuron_basket_construction_parameters:e.Opt(l),fallback_controller_principal_ids:e.Vec(e.Text),token_symbol:e.Opt(e.Text),final_reward_rate_basis_points:e.Opt(e.Nat64),max_icp_e8s:e.Opt(e.Nat64),neuron_minimum_stake_e8s:e.Opt(e.Nat64),confirmation_text:e.Opt(e.Text),logo:e.Opt(e.Text),name:e.Opt(e.Text),swap_start_timestamp_seconds:e.Opt(e.Nat64),swap_due_timestamp_seconds:e.Opt(e.Nat64),initial_voting_period_seconds:e.Opt(e.Nat64),neuron_minimum_dissolve_delay_to_vote_seconds:e.Opt(e.Nat64),description:e.Opt(e.Text),max_neuron_age_seconds_for_age_bonus:e.Opt(e.Nat64),min_participants:e.Opt(e.Nat64),initial_reward_rate_basis_points:e.Opt(e.Nat64),wait_for_quiet_deadline_increase_seconds:e.Opt(e.Nat64),transaction_fee_e8s:e.Opt(e.Nat64),dapp_canisters:e.Opt(u),neurons_fund_participants:e.Opt(m),max_age_bonus_percentage:e.Opt(e.Nat64),initial_token_distribution:e.Opt(x),reward_rate_transition_duration_seconds:e.Opt(e.Nat64),token_logo:e.Opt(e.Text),token_name:e.Opt(e.Text),max_participant_icp_e8s:e.Opt(e.Nat64),proposal_reject_cost_e8s:e.Opt(e.Nat64),restricted_countries:e.Opt(g),min_icp_e8s:e.Opt(e.Nat64)}),S=e.Record({sns_init_payload:e.Opt(h)}),y=e.Record({restored_dapp_canisters:e.Vec(a),nns_controlled_dapp_canisters:e.Vec(a),sns_controlled_dapp_canisters:e.Vec(a)}),b=e.Record({root:e.Opt(e.Principal),swap:e.Opt(e.Principal),ledger:e.Opt(e.Principal),index:e.Opt(e.Principal),governance:e.Opt(e.Principal)}),T=e.Record({dapp_canisters_transfer_result:e.Opt(y),subnet_id:e.Opt(e.Principal),error:e.Opt(s),canisters:e.Opt(b)}),c=e.Record({allowed_principals:e.Vec(e.Principal)}),t=e.Record({archive_wasm_hash:e.Vec(e.Nat8),root_wasm_hash:e.Vec(e.Nat8),swap_wasm_hash:e.Vec(e.Nat8),ledger_wasm_hash:e.Vec(e.Nat8),governance_wasm_hash:e.Vec(e.Nat8),index_wasm_hash:e.Vec(e.Nat8)}),F=e.Record({governance_canister_id:e.Opt(e.Principal),current_version:e.Opt(t)}),f=e.Record({next_version:e.Opt(t)}),q=e.Record({sns_subnet_ids:e.Vec(e.Principal)}),C=e.Record({hash:e.Vec(e.Nat8)}),k=e.Record({wasm:e.Opt(n)}),U=e.Record({next_version:e.Opt(t),current_version:e.Opt(t)}),W=e.Record({upgrade_path:e.Vec(U),sns_governance_canister_id:e.Opt(e.Principal)}),A=e.Record({error:e.Opt(s)}),E=e.Record({root_canister_id:e.Opt(e.Principal),governance_canister_id:e.Opt(e.Principal),index_canister_id:e.Opt(e.Principal),swap_canister_id:e.Opt(e.Principal),ledger_canister_id:e.Opt(e.Principal)}),G=e.Record({instances:e.Vec(E)}),B=e.Record({limit:e.Nat32,starting_at:e.Opt(t),sns_governance_canister_id:e.Opt(e.Principal)}),j=e.Record({archive_wasm_hash:e.Text,root_wasm_hash:e.Text,swap_wasm_hash:e.Text,ledger_wasm_hash:e.Text,governance_wasm_hash:e.Text,index_wasm_hash:e.Text}),H=e.Record({pretty_version:e.Opt(j),version:e.Opt(t)}),M=e.Record({steps:e.Vec(H)}),z=e.Record({added_principals:e.Vec(e.Principal),removed_principals:e.Vec(e.Principal)}),J=e.Variant({Error:s,AllowedPrincipals:c}),K=e.Record({update_allowed_principals_result:e.Opt(J)}),Q=e.Record({sns_subnet_ids_to_add:e.Vec(e.Principal),sns_subnet_ids_to_remove:e.Vec(e.Principal)}),X=e.Record({error:e.Opt(s)});return e.Service({add_wasm:e.Func([i],[d],[]),deploy_new_sns:e.Func([S],[T],[]),get_allowed_principals:e.Func([e.Record({})],[c],["query"]),get_latest_sns_version_pretty:e.Func([e.Null],[e.Vec(e.Tuple(e.Text,e.Text))],["query"]),get_next_sns_version:e.Func([F],[f],["query"]),get_sns_subnet_ids:e.Func([e.Record({})],[q],["query"]),get_wasm:e.Func([C],[k],["query"]),insert_upgrade_path_entries:e.Func([W],[A],[]),list_deployed_snses:e.Func([e.Record({})],[G],["query"]),list_upgrade_steps:e.Func([B],[M],["query"]),update_allowed_principals:e.Func([z],[K],[]),update_sns_subnet_list:e.Func([Q],[X],[])})};var p=class{constructor(r,n){this.service=r;this.certifiedService=n}static create(r={}){let{service:n,certifiedService:i}=D({options:{...r,canisterId:r.canisterId??Y},idlFactory:$,certifiedIdlFactory:Z});return new p(n,i)}listSnses=async({certified:r=!0})=>{let n=r?this.certifiedService:this.service,{instances:i}=await n.list_deployed_snses({});return i}};export{p as a};
//# sourceMappingURL=chunk-FTOSOLE4.js.map
