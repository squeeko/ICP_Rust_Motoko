import{a as u}from"./chunk-3VPA6D46.js";import{a as v,b as P,c as b,d as y,e as B,f as S,g as C,h as g,i as w,j as T,k as _,l as A,m as G,n as V,o as W,p as h,q as k,r as D,s as m}from"./chunk-V7YCXQVA.js";import{c as d,d as i}from"./chunk-4SFQPNVV.js";import{a as I}from"./chunk-XJOUJJZM.js";import{a as E,b as F,c as L,d as O,e as R,f as j,g as q,h as z,i as H,j as c}from"./chunk-LRX366G2.js";import"./chunk-DGJWOAUC.js";import"./chunk-FCMD5MHU.js";import{a as x}from"./chunk-FTOSOLE4.js";import"./chunk-ZMUQLPST.js";import"./chunk-Q3ETFEQV.js";var f=({recentBallots:e,proposalId:o})=>o?e.find(({proposalId:r})=>r===o)?.vote:void 0,N=({neurons:e,proposal:o})=>{let{ballots:n,proposalTimestampSeconds:r}=o;return e.filter(({createdTimestampSeconds:t,neuronId:s})=>{let p=t>r,a=n.find(({neuronId:l})=>l===s)===void 0;return p||a})},J=({neurons:e,proposal:o})=>{let{id:n}=o;return e.filter(({recentBallots:r,neuronId:t})=>f({recentBallots:r,proposalId:n})===void 0&&N({neurons:e,proposal:o}).find(({neuronId:s})=>s===t)===void 0)},K=({neurons:e,proposal:{id:o}})=>e.filter(({recentBallots:n})=>f({recentBallots:n,proposalId:o})!==void 0);export{d as AccountIdentifier,q as BadFeeError,P as CouldNotClaimNeuronError,g as FeatureNotSupportedError,u as GenesisTokenCanister,m as GovernanceCanister,B as GovernanceError,I as ICP,b as InsufficientAmountError,L as InsufficientFundsError,S as InvalidAccountIDError,F as InvalidSenderError,c as LedgerCanister,A as NeuronState,k as NnsFunction,V as ProposalRewardStatus,W as ProposalStatus,x as SnsWasmCanister,v as StakeNeuronError,i as SubAccount,G as Topic,E as TransferError,R as TxCreatedInFutureError,j as TxDuplicateError,O as TxTooOldError,y as UnrecognizedTypeError,C as UnsupportedValueError,h as Vote,T as accountIdentifierFromBytes,w as accountIdentifierToBytes,D as checkAccountId,N as ineligibleNeurons,z as mapTransferError,H as mapTransferProtoError,_ as principalToAccountIdentifier,J as votableNeurons,K as votedNeurons};
//# sourceMappingURL=index.js.map
