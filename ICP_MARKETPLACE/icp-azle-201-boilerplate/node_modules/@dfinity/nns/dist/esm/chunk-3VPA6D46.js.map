{
  "version": 3,
  "sources": ["../../src/genesis_token.canister.ts", "../../candid/genesis_token.certified.idl.js", "../../candid/genesis_token.idl.js"],
  "sourcesContent": ["import type { ActorSubclass } from \"@dfinity/agent\";\nimport { createServices, type CanisterOptions } from \"@dfinity/utils\";\nimport type { _SERVICE as GenesisTokenService } from \"../candid/genesis_token\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/genesis_token.certified.idl\";\nimport { idlFactory } from \"../candid/genesis_token.idl\";\nimport { MAINNET_GENESIS_TOKEN_CANISTER_ID } from \"./constants/canister_ids\";\nimport type { NeuronId } from \"./types/common\";\n\nexport class GenesisTokenCanister {\n  private constructor(\n    private readonly service: ActorSubclass<GenesisTokenService>,\n  ) {}\n\n  public static create(options: CanisterOptions<GenesisTokenService> = {}) {\n    const { service } = createServices<GenesisTokenService>({\n      options: {\n        ...options,\n        canisterId: options.canisterId ?? MAINNET_GENESIS_TOKEN_CANISTER_ID,\n      },\n      idlFactory,\n      certifiedIdlFactory,\n    });\n\n    return new GenesisTokenCanister(service);\n  }\n\n  public claimNeurons = async ({\n    hexPubKey,\n  }: {\n    hexPubKey: string;\n  }): Promise<NeuronId[]> => {\n    const response = await this.service.claim_neurons(hexPubKey);\n    if (\"Ok\" in response) {\n      return response.Ok.map((neuronId) => neuronId.id);\n    }\n\n    throw new Error(response.Err);\n  };\n}\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/genesis_token.did */\nexport const idlFactory = ({ IDL }) => {\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Result = IDL.Variant({ 'Ok' : IDL.Vec(NeuronId), 'Err' : IDL.Text });\n  const Result_1 = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : IDL.Text });\n  const TransferredNeuron = IDL.Record({\n    'error' : IDL.Opt(IDL.Text),\n    'timestamp_seconds' : IDL.Nat64,\n    'neuron_id' : IDL.Opt(NeuronId),\n  });\n  const AccountState = IDL.Record({\n    'authenticated_principal_id' : IDL.Opt(IDL.Principal),\n    'successfully_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'is_whitelisted_for_forwarding' : IDL.Bool,\n    'has_donated' : IDL.Bool,\n    'failed_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'neuron_ids' : IDL.Vec(NeuronId),\n    'has_claimed' : IDL.Bool,\n    'has_forwarded' : IDL.Bool,\n    'icpts' : IDL.Nat32,\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : AccountState, 'Err' : IDL.Text });\n  return IDL.Service({\n    'balance' : IDL.Func([IDL.Text], [IDL.Nat32], []),\n    'claim_neurons' : IDL.Func([IDL.Text], [Result], []),\n    'donate_account' : IDL.Func([IDL.Text], [Result_1], []),\n    'forward_whitelisted_unclaimed_accounts' : IDL.Func(\n        [IDL.Null],\n        [Result_1],\n        [],\n      ),\n    'get_account' : IDL.Func([IDL.Text], [Result_2], []),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], []),\n    'len' : IDL.Func([], [IDL.Nat16], []),\n    'total' : IDL.Func([], [IDL.Nat32], []),\n  });\n};\nexport const init = ({ IDL }) => { return []; };\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from packages/nns/candid/genesis_token.did */\nexport const idlFactory = ({ IDL }) => {\n  const NeuronId = IDL.Record({ 'id' : IDL.Nat64 });\n  const Result = IDL.Variant({ 'Ok' : IDL.Vec(NeuronId), 'Err' : IDL.Text });\n  const Result_1 = IDL.Variant({ 'Ok' : IDL.Null, 'Err' : IDL.Text });\n  const TransferredNeuron = IDL.Record({\n    'error' : IDL.Opt(IDL.Text),\n    'timestamp_seconds' : IDL.Nat64,\n    'neuron_id' : IDL.Opt(NeuronId),\n  });\n  const AccountState = IDL.Record({\n    'authenticated_principal_id' : IDL.Opt(IDL.Principal),\n    'successfully_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'is_whitelisted_for_forwarding' : IDL.Bool,\n    'has_donated' : IDL.Bool,\n    'failed_transferred_neurons' : IDL.Vec(TransferredNeuron),\n    'neuron_ids' : IDL.Vec(NeuronId),\n    'has_claimed' : IDL.Bool,\n    'has_forwarded' : IDL.Bool,\n    'icpts' : IDL.Nat32,\n  });\n  const Result_2 = IDL.Variant({ 'Ok' : AccountState, 'Err' : IDL.Text });\n  return IDL.Service({\n    'balance' : IDL.Func([IDL.Text], [IDL.Nat32], ['query']),\n    'claim_neurons' : IDL.Func([IDL.Text], [Result], []),\n    'donate_account' : IDL.Func([IDL.Text], [Result_1], []),\n    'forward_whitelisted_unclaimed_accounts' : IDL.Func(\n        [IDL.Null],\n        [Result_1],\n        [],\n      ),\n    'get_account' : IDL.Func([IDL.Text], [Result_2], ['query']),\n    'get_build_metadata' : IDL.Func([], [IDL.Text], ['query']),\n    'len' : IDL.Func([], [IDL.Nat16], ['query']),\n    'total' : IDL.Func([], [IDL.Nat32], ['query']),\n  });\n};\nexport const init = ({ IDL }) => { return []; };\n"],
  "mappings": "wCACA,OAAS,kBAAAA,MAA4C,iBCA9C,IAAMC,EAAa,CAAC,CAAE,IAAAC,CAAI,IAAM,CACrC,IAAMC,EAAWD,EAAI,OAAO,CAAE,GAAOA,EAAI,KAAM,CAAC,EAC1CE,EAASF,EAAI,QAAQ,CAAE,GAAOA,EAAI,IAAIC,CAAQ,EAAG,IAAQD,EAAI,IAAK,CAAC,EACnEG,EAAWH,EAAI,QAAQ,CAAE,GAAOA,EAAI,KAAM,IAAQA,EAAI,IAAK,CAAC,EAC5DI,EAAoBJ,EAAI,OAAO,CACnC,MAAUA,EAAI,IAAIA,EAAI,IAAI,EAC1B,kBAAsBA,EAAI,MAC1B,UAAcA,EAAI,IAAIC,CAAQ,CAChC,CAAC,EACKI,EAAeL,EAAI,OAAO,CAC9B,2BAA+BA,EAAI,IAAIA,EAAI,SAAS,EACpD,iCAAqCA,EAAI,IAAII,CAAiB,EAC9D,8BAAkCJ,EAAI,KACtC,YAAgBA,EAAI,KACpB,2BAA+BA,EAAI,IAAII,CAAiB,EACxD,WAAeJ,EAAI,IAAIC,CAAQ,EAC/B,YAAgBD,EAAI,KACpB,cAAkBA,EAAI,KACtB,MAAUA,EAAI,KAChB,CAAC,EACKM,EAAWN,EAAI,QAAQ,CAAE,GAAOK,EAAc,IAAQL,EAAI,IAAK,CAAC,EACtE,OAAOA,EAAI,QAAQ,CACjB,QAAYA,EAAI,KAAK,CAACA,EAAI,IAAI,EAAG,CAACA,EAAI,KAAK,EAAG,CAAC,CAAC,EAChD,cAAkBA,EAAI,KAAK,CAACA,EAAI,IAAI,EAAG,CAACE,CAAM,EAAG,CAAC,CAAC,EACnD,eAAmBF,EAAI,KAAK,CAACA,EAAI,IAAI,EAAG,CAACG,CAAQ,EAAG,CAAC,CAAC,EACtD,uCAA2CH,EAAI,KAC3C,CAACA,EAAI,IAAI,EACT,CAACG,CAAQ,EACT,CAAC,CACH,EACF,YAAgBH,EAAI,KAAK,CAACA,EAAI,IAAI,EAAG,CAACM,CAAQ,EAAG,CAAC,CAAC,EACnD,mBAAuBN,EAAI,KAAK,CAAC,EAAG,CAACA,EAAI,IAAI,EAAG,CAAC,CAAC,EAClD,IAAQA,EAAI,KAAK,CAAC,EAAG,CAACA,EAAI,KAAK,EAAG,CAAC,CAAC,EACpC,MAAUA,EAAI,KAAK,CAAC,EAAG,CAACA,EAAI,KAAK,EAAG,CAAC,CAAC,CACxC,CAAC,CACH,ECnCO,IAAMO,EAAa,CAAC,CAAE,IAAAC,CAAI,IAAM,CACrC,IAAMC,EAAWD,EAAI,OAAO,CAAE,GAAOA,EAAI,KAAM,CAAC,EAC1CE,EAASF,EAAI,QAAQ,CAAE,GAAOA,EAAI,IAAIC,CAAQ,EAAG,IAAQD,EAAI,IAAK,CAAC,EACnEG,EAAWH,EAAI,QAAQ,CAAE,GAAOA,EAAI,KAAM,IAAQA,EAAI,IAAK,CAAC,EAC5DI,EAAoBJ,EAAI,OAAO,CACnC,MAAUA,EAAI,IAAIA,EAAI,IAAI,EAC1B,kBAAsBA,EAAI,MAC1B,UAAcA,EAAI,IAAIC,CAAQ,CAChC,CAAC,EACKI,EAAeL,EAAI,OAAO,CAC9B,2BAA+BA,EAAI,IAAIA,EAAI,SAAS,EACpD,iCAAqCA,EAAI,IAAII,CAAiB,EAC9D,8BAAkCJ,EAAI,KACtC,YAAgBA,EAAI,KACpB,2BAA+BA,EAAI,IAAII,CAAiB,EACxD,WAAeJ,EAAI,IAAIC,CAAQ,EAC/B,YAAgBD,EAAI,KACpB,cAAkBA,EAAI,KACtB,MAAUA,EAAI,KAChB,CAAC,EACKM,EAAWN,EAAI,QAAQ,CAAE,GAAOK,EAAc,IAAQL,EAAI,IAAK,CAAC,EACtE,OAAOA,EAAI,QAAQ,CACjB,QAAYA,EAAI,KAAK,CAACA,EAAI,IAAI,EAAG,CAACA,EAAI,KAAK,EAAG,CAAC,OAAO,CAAC,EACvD,cAAkBA,EAAI,KAAK,CAACA,EAAI,IAAI,EAAG,CAACE,CAAM,EAAG,CAAC,CAAC,EACnD,eAAmBF,EAAI,KAAK,CAACA,EAAI,IAAI,EAAG,CAACG,CAAQ,EAAG,CAAC,CAAC,EACtD,uCAA2CH,EAAI,KAC3C,CAACA,EAAI,IAAI,EACT,CAACG,CAAQ,EACT,CAAC,CACH,EACF,YAAgBH,EAAI,KAAK,CAACA,EAAI,IAAI,EAAG,CAACM,CAAQ,EAAG,CAAC,OAAO,CAAC,EAC1D,mBAAuBN,EAAI,KAAK,CAAC,EAAG,CAACA,EAAI,IAAI,EAAG,CAAC,OAAO,CAAC,EACzD,IAAQA,EAAI,KAAK,CAAC,EAAG,CAACA,EAAI,KAAK,EAAG,CAAC,OAAO,CAAC,EAC3C,MAAUA,EAAI,KAAK,CAAC,EAAG,CAACA,EAAI,KAAK,EAAG,CAAC,OAAO,CAAC,CAC/C,CAAC,CACH,EF5BO,IAAMO,EAAN,KAA2B,CACxB,YACWC,EACjB,CADiB,aAAAA,CAChB,CAEH,OAAc,OAAOC,EAAgD,CAAC,EAAG,CACvE,GAAM,CAAE,QAAAD,CAAQ,EAAIE,EAAoC,CACtD,QAAS,CACP,GAAGD,EACH,WAAYA,EAAQ,YAAcE,CACpC,EACA,WAAAC,EACA,oBAAAA,CACF,CAAC,EAED,OAAO,IAAIL,EAAqBC,CAAO,CACzC,CAEO,aAAe,MAAO,CAC3B,UAAAK,CACF,IAE2B,CACzB,IAAMC,EAAW,MAAM,KAAK,QAAQ,cAAcD,CAAS,EAC3D,GAAI,OAAQC,EACV,OAAOA,EAAS,GAAG,IAAKC,GAAaA,EAAS,EAAE,EAGlD,MAAM,IAAI,MAAMD,EAAS,GAAG,CAC9B,CACF",
  "names": ["createServices", "idlFactory", "IDL", "NeuronId", "Result", "Result_1", "TransferredNeuron", "AccountState", "Result_2", "idlFactory", "IDL", "NeuronId", "Result", "Result_1", "TransferredNeuron", "AccountState", "Result_2", "GenesisTokenCanister", "service", "options", "createServices", "MAINNET_GENESIS_TOKEN_CANISTER_ID", "idlFactory", "hexPubKey", "response", "neuronId"]
}
