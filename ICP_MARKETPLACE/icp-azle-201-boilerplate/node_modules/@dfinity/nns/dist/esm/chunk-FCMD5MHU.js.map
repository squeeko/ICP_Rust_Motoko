{
  "version": 3,
  "sources": ["../../src/utils/proto.utils.ts"],
  "sourcesContent": ["import type { Agent } from \"@dfinity/agent\";\nimport { polling } from \"@dfinity/agent\";\nimport type { Principal } from \"@dfinity/principal\";\n\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports\ntype ModuleType = typeof import(\"@dfinity/nns-proto\");\nexport const importNnsProto = (): Promise<ModuleType> =>\n  import(\"@dfinity/nns-proto\");\n\n/**\n * Submits an update call to the IC.\n * @returns The (binary) response if the request succeeded, an error otherwise.\n */\nexport const updateCall = async ({\n  agent,\n  canisterId,\n  methodName,\n  arg,\n}: {\n  agent: Agent;\n  canisterId: Principal;\n  methodName: string;\n  arg: ArrayBuffer;\n}): Promise<Uint8Array> => {\n  const submitResponse = await agent.call(canisterId, {\n    methodName,\n    arg,\n    effectiveCanisterId: canisterId,\n  });\n\n  if (!submitResponse.response.ok) {\n    throw new Error(\n      [\n        \"Call failed:\",\n        `  Method: ${methodName}`,\n        `  Canister ID: ${canisterId}`,\n        `  Request ID: ${submitResponse.requestId}`,\n        `  HTTP status code: ${submitResponse.response.status}`,\n        `  HTTP status text: ${submitResponse.response.statusText}`,\n      ].join(\"\\n\"),\n    );\n  }\n\n  const blob = await polling.pollForResponse(\n    agent,\n    canisterId,\n    submitResponse.requestId,\n    polling.defaultStrategy(),\n  );\n\n  return new Uint8Array(blob);\n};\n\n/**\n * Submits a query call to the IC.\n * @returns The (binary) response if the request succeeded, an error otherwise.\n */\nexport const queryCall = async ({\n  agent,\n  canisterId,\n  methodName,\n  arg,\n}: {\n  agent: Agent;\n  canisterId: Principal;\n  methodName: string;\n  arg: ArrayBuffer;\n}): Promise<Uint8Array> => {\n  const queryResponse = await agent.query(canisterId, {\n    methodName,\n    arg,\n  });\n\n  if (queryResponse.status == \"rejected\") {\n    throw new Error(\n      [\n        \"Call failed:\",\n        `  Method: ${methodName}`,\n        `  Canister ID: ${canisterId}`,\n        `  HTTP status code: ${queryResponse.reject_code}`,\n        `  HTTP status text: ${queryResponse.reject_message}`,\n      ].join(\"\\n\"),\n    );\n  }\n\n  return new Uint8Array(queryResponse.reply.arg);\n};\n"],
  "mappings": "AACA,OAAS,WAAAA,MAAe,iBAKjB,IAAMC,EAAiB,IAC5B,OAAO,oBAAoB,EAMhBC,EAAa,MAAO,CAC/B,MAAAC,EACA,WAAAC,EACA,WAAAC,EACA,IAAAC,CACF,IAK2B,CACzB,IAAMC,EAAiB,MAAMJ,EAAM,KAAKC,EAAY,CAClD,WAAAC,EACA,IAAAC,EACA,oBAAqBF,CACvB,CAAC,EAED,GAAI,CAACG,EAAe,SAAS,GAC3B,MAAM,IAAI,MACR,CACE,eACA,aAAaF,IACb,kBAAkBD,IAClB,iBAAiBG,EAAe,YAChC,uBAAuBA,EAAe,SAAS,SAC/C,uBAAuBA,EAAe,SAAS,YACjD,EAAE,KAAK;AAAA,CAAI,CACb,EAGF,IAAMC,EAAO,MAAMR,EAAQ,gBACzBG,EACAC,EACAG,EAAe,UACfP,EAAQ,gBAAgB,CAC1B,EAEA,OAAO,IAAI,WAAWQ,CAAI,CAC5B,EAMaC,EAAY,MAAO,CAC9B,MAAAN,EACA,WAAAC,EACA,WAAAC,EACA,IAAAC,CACF,IAK2B,CACzB,IAAMI,EAAgB,MAAMP,EAAM,MAAMC,EAAY,CAClD,WAAAC,EACA,IAAAC,CACF,CAAC,EAED,GAAII,EAAc,QAAU,WAC1B,MAAM,IAAI,MACR,CACE,eACA,aAAaL,IACb,kBAAkBD,IAClB,uBAAuBM,EAAc,cACrC,uBAAuBA,EAAc,gBACvC,EAAE,KAAK;AAAA,CAAI,CACb,EAGF,OAAO,IAAI,WAAWA,EAAc,MAAM,GAAG,CAC/C",
  "names": ["polling", "importNnsProto", "updateCall", "agent", "canisterId", "methodName", "arg", "submitResponse", "blob", "queryCall", "queryResponse"]
}
