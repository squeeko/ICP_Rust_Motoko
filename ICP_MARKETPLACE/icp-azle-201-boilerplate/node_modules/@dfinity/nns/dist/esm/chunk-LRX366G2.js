import{a as N}from"./chunk-DGJWOAUC.js";import{a as R,b as I,c as L}from"./chunk-FCMD5MHU.js";import{b as D}from"./chunk-ZMUQLPST.js";import{createServices as ue}from"@dfinity/utils";var ee=({IDL:e})=>{let r=e.Vec(e.Nat8),c=e.Record({owner:e.Principal,subaccount:e.Opt(r)}),n=e.Record({maximum_number_of_accounts:e.Opt(e.Nat64),icrc1_minting_account:e.Opt(c)}),t=e.Record({e8s:e.Nat64}),a=e.Text,d=e.Record({secs:e.Nat64,nanos:e.Nat32}),f=e.Record({num_blocks_to_archive:e.Nat64,trigger_threshold:e.Nat64,max_message_size_bytes:e.Opt(e.Nat64),cycles_for_archive_creation:e.Opt(e.Nat64),node_max_memory_size_bytes:e.Opt(e.Nat64),controller_id:e.Principal}),T=e.Record({send_whitelist:e.Vec(e.Principal),token_symbol:e.Opt(e.Text),transfer_fee:e.Opt(t),minting_account:a,transaction_window:e.Opt(d),max_message_size_bytes:e.Opt(e.Nat64),icrc1_minting_account:e.Opt(c),archive_options:e.Opt(f),initial_values:e.Vec(e.Tuple(a,t)),token_name:e.Opt(e.Text)}),P=e.Variant({Upgrade:e.Opt(n),Init:T}),o=e.Nat64,y=e.Record({start:o,length:e.Nat64}),u=e.Nat64,i=e.Vec(e.Nat8),l=e.Record({timestamp_nanos:e.Nat64}),s=e.Variant({Approve:e.Record({fee:t,from:i,allowance_e8s:e.Int,expires_at:e.Opt(l),spender:i}),Burn:e.Record({from:i,amount:t}),Mint:e.Record({to:i,amount:t}),Transfer:e.Record({to:i,fee:t,from:i,amount:t}),TransferFrom:e.Record({to:i,fee:t,from:i,amount:t,spender:i})}),S=e.Record({memo:u,icrc1_memo:e.Opt(e.Vec(e.Nat8)),operation:e.Opt(s),created_at_time:l}),x=e.Record({transaction:S,timestamp:l,parent_hash:e.Opt(e.Vec(e.Nat8))}),q=e.Record({blocks:e.Vec(x)}),O=e.Variant({BadFirstBlockIndex:e.Record({requested_index:o,first_valid_index:o}),Other:e.Record({error_message:e.Text,error_code:e.Nat64})}),C=e.Variant({Ok:q,Err:O}),E=e.Func([y],[C],[]),m=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),blocks:e.Vec(x),chain_length:e.Nat64,first_block_index:o,archived_blocks:e.Vec(e.Record({callback:E,start:o,length:e.Nat64}))}),h=e.Record({account:i}),b=e.Record({account:a}),g=e.Record({canister_id:e.Principal}),U=e.Record({archives:e.Vec(g)}),p=e.Nat,F=e.Variant({Int:e.Int,Nat:e.Nat,Blob:e.Vec(e.Nat8),Text:e.Text}),z=e.Nat64,H=e.Record({to:c,fee:e.Opt(p),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(r),created_at_time:e.Opt(z),amount:p}),w=e.Nat,M=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,BadBurn:e.Record({min_burn_amount:p}),Duplicate:e.Record({duplicate_of:w}),BadFee:e.Record({expected_fee:p}),CreatedInFuture:e.Record({ledger_time:e.Nat64}),TooOld:e.Null,InsufficientFunds:e.Record({balance:p})}),W=e.Variant({Ok:w,Err:M}),Q=e.Record({to:a,fee:t,memo:u,from_subaccount:e.Opt(r),created_at_time:e.Opt(l),amount:t}),G=e.Record({to:i,fee:t,memo:u,from_subaccount:e.Opt(r),created_at_time:e.Opt(l),amount:t}),j=e.Variant({TxTooOld:e.Record({allowed_window_nanos:e.Nat64}),BadFee:e.Record({expected_fee:t}),TxDuplicate:e.Record({duplicate_of:o}),TxCreatedInFuture:e.Null,InsufficientFunds:e.Record({balance:t})}),J=e.Variant({Ok:o,Err:j}),$=e.Record({}),K=e.Record({transfer_fee:t});return e.Service({_blocks:e.Func([y],[m],[]),account_balance:e.Func([h],[t],[]),account_balance_dfx:e.Func([b],[t],[]),archives:e.Func([],[U],[]),decimals:e.Func([],[e.Record({decimals:e.Nat32})],[]),icrc1_balance_of:e.Func([c],[p],[]),icrc1_decimals:e.Func([],[e.Nat8],[]),icrc1_fee:e.Func([],[p],[]),icrc1_metadata:e.Func([],[e.Vec(e.Tuple(e.Text,F))],[]),icrc1_minting_account:e.Func([],[e.Opt(c)],[]),icrc1_name:e.Func([],[e.Text],[]),icrc1_supported_standards:e.Func([],[e.Vec(e.Record({url:e.Text,name:e.Text}))],[]),icrc1_symbol:e.Func([],[e.Text],[]),icrc1_total_supply:e.Func([],[p],[]),icrc1_transfer:e.Func([H],[W],[]),name:e.Func([],[e.Record({name:e.Text})],[]),send_dfx:e.Func([Q],[o],[]),symbol:e.Func([],[e.Record({symbol:e.Text})],[]),transfer:e.Func([G],[J],[]),transfer_fee:e.Func([$],[K],[])})};var te=({IDL:e})=>{let r=e.Vec(e.Nat8),c=e.Record({owner:e.Principal,subaccount:e.Opt(r)}),n=e.Record({maximum_number_of_accounts:e.Opt(e.Nat64),icrc1_minting_account:e.Opt(c)}),t=e.Record({e8s:e.Nat64}),a=e.Text,d=e.Record({secs:e.Nat64,nanos:e.Nat32}),f=e.Record({num_blocks_to_archive:e.Nat64,trigger_threshold:e.Nat64,max_message_size_bytes:e.Opt(e.Nat64),cycles_for_archive_creation:e.Opt(e.Nat64),node_max_memory_size_bytes:e.Opt(e.Nat64),controller_id:e.Principal}),T=e.Record({send_whitelist:e.Vec(e.Principal),token_symbol:e.Opt(e.Text),transfer_fee:e.Opt(t),minting_account:a,transaction_window:e.Opt(d),max_message_size_bytes:e.Opt(e.Nat64),icrc1_minting_account:e.Opt(c),archive_options:e.Opt(f),initial_values:e.Vec(e.Tuple(a,t)),token_name:e.Opt(e.Text)}),P=e.Variant({Upgrade:e.Opt(n),Init:T}),o=e.Vec(e.Nat8),y=e.Record({account:o}),u=e.Record({account:a}),i=e.Record({canister_id:e.Principal}),l=e.Record({archives:e.Vec(i)}),s=e.Nat,S=e.Variant({Int:e.Int,Nat:e.Nat,Blob:e.Vec(e.Nat8),Text:e.Text}),x=e.Nat64,q=e.Record({to:c,fee:e.Opt(s),memo:e.Opt(e.Vec(e.Nat8)),from_subaccount:e.Opt(r),created_at_time:e.Opt(x),amount:s}),O=e.Nat,C=e.Variant({GenericError:e.Record({message:e.Text,error_code:e.Nat}),TemporarilyUnavailable:e.Null,BadBurn:e.Record({min_burn_amount:s}),Duplicate:e.Record({duplicate_of:O}),BadFee:e.Record({expected_fee:s}),CreatedInFuture:e.Record({ledger_time:e.Nat64}),TooOld:e.Null,InsufficientFunds:e.Record({balance:s})}),E=e.Variant({Ok:O,Err:C}),m=e.Nat64,h=e.Record({start:m,length:e.Nat64}),b=e.Nat64,g=e.Record({timestamp_nanos:e.Nat64}),U=e.Variant({Approve:e.Record({fee:t,from:o,allowance_e8s:e.Int,expires_at:e.Opt(g),spender:o}),Burn:e.Record({from:o,amount:t}),Mint:e.Record({to:o,amount:t}),Transfer:e.Record({to:o,fee:t,from:o,amount:t}),TransferFrom:e.Record({to:o,fee:t,from:o,amount:t,spender:o})}),p=e.Record({memo:b,icrc1_memo:e.Opt(e.Vec(e.Nat8)),operation:e.Opt(U),created_at_time:g}),F=e.Record({transaction:p,timestamp:g,parent_hash:e.Opt(e.Vec(e.Nat8))}),z=e.Record({blocks:e.Vec(F)}),H=e.Variant({BadFirstBlockIndex:e.Record({requested_index:m,first_valid_index:m}),Other:e.Record({error_message:e.Text,error_code:e.Nat64})}),w=e.Variant({Ok:z,Err:H}),M=e.Func([h],[w],["query"]),W=e.Record({certificate:e.Opt(e.Vec(e.Nat8)),blocks:e.Vec(F),chain_length:e.Nat64,first_block_index:m,archived_blocks:e.Vec(e.Record({callback:M,start:m,length:e.Nat64}))}),Q=e.Record({to:a,fee:t,memo:b,from_subaccount:e.Opt(r),created_at_time:e.Opt(g),amount:t}),G=e.Record({to:o,fee:t,memo:b,from_subaccount:e.Opt(r),created_at_time:e.Opt(g),amount:t}),j=e.Variant({TxTooOld:e.Record({allowed_window_nanos:e.Nat64}),BadFee:e.Record({expected_fee:t}),TxDuplicate:e.Record({duplicate_of:m}),TxCreatedInFuture:e.Null,InsufficientFunds:e.Record({balance:t})}),J=e.Variant({Ok:m,Err:j}),$=e.Record({}),K=e.Record({transfer_fee:t});return e.Service({account_balance:e.Func([y],[t],["query"]),account_balance_dfx:e.Func([u],[t],["query"]),archives:e.Func([],[l],["query"]),decimals:e.Func([],[e.Record({decimals:e.Nat32})],["query"]),icrc1_balance_of:e.Func([c],[s],["query"]),icrc1_decimals:e.Func([],[e.Nat8],["query"]),icrc1_fee:e.Func([],[s],["query"]),icrc1_metadata:e.Func([],[e.Vec(e.Tuple(e.Text,S))],["query"]),icrc1_minting_account:e.Func([],[e.Opt(c)],["query"]),icrc1_name:e.Func([],[e.Text],["query"]),icrc1_supported_standards:e.Func([],[e.Vec(e.Record({url:e.Text,name:e.Text}))],["query"]),icrc1_symbol:e.Func([],[e.Text],["query"]),icrc1_total_supply:e.Func([],[s],["query"]),icrc1_transfer:e.Func([q],[E],[]),name:e.Func([],[e.Record({name:e.Text})],["query"]),query_blocks:e.Func([h],[W],["query"]),send_dfx:e.Func([Q],[m],[]),symbol:e.Func([],[e.Record({symbol:e.Text})],["query"]),transfer:e.Func([G],[J],[]),transfer_fee:e.Func([$],[K],["query"])})};import{arrayOfNumberToUint8Array as se}from"@dfinity/utils";var ce=async e=>{let r=new Uint8Array(e).buffer,{Subaccount:c}=await R(),n=new c;return n.setSubAccount(new Uint8Array(r)),n},X=async e=>{let{ICPTs:r}=await R(),c=new r;return c.setE8s(e.toString(10)),c},re=e=>({e8s:e}),ne=({to:e,amount:r,memo:c,fee:n,fromSubAccount:t,createdAt:a})=>({to:e.toUint8Array(),fee:re(n??N),amount:re(r),memo:c??BigInt(0),created_at_time:a!==void 0?[{timestamp_nanos:a}]:[],from_subaccount:t===void 0?[]:[se(t)]});import{convertStringToE8s as ie}from"@dfinity/utils";var _=class extends Error{},Y=class extends _{},A=class extends _{constructor(c){super();this.balance=c}},v=class extends _{constructor(c){super();this.allowed_window_secs=c}},k=class extends _{},V=class extends _{constructor(c){super();this.duplicateOf=c}},Z=class extends _{constructor(c){super();this.expectedFee=c}},oe=e=>"TxDuplicate"in e?new V(e.TxDuplicate.duplicate_of):"InsufficientFunds"in e?new A(e.InsufficientFunds.balance.e8s):"TxCreatedInFuture"in e?new k:"TxTooOld"in e?new v(Number(e.TxTooOld.allowed_window_nanos)):"BadFee"in e?new Z(e.BadFee.expected_fee.e8s):new _(`Unknown error type ${JSON.stringify(e)}`),ae=e=>{let{message:r}=e;if(r.includes("Reject code: 5")){if(r.match(/Sending from (.*) is not allowed/))return new Y;{let c=r.match(/transaction.*duplicate.* in block (\d+)/);if(c&&c.length>1)return new V(BigInt(c[1]))}{let c=r.match(/debit account.*, current balance: (\d*(\.\d*)?)/);if(c&&c.length>1){let n=ie(c[1]);if(typeof n=="bigint")return new A(n)}}if(r.includes("is in future"))return new k;{let c=r.match(/older than (\d+)/);if(c&&c.length>1)return new v(Number.parseInt(c[1]))}}throw e};var B=class{constructor(r,c,n,t,a,d,f=!1){this.agent=r;this.canisterId=c;this.service=n;this.certifiedService=t;this.updateFetcher=a;this.queryFetcher=d;this.hardwareWallet=f}static create(r={}){let c=r.canisterId??D,{service:n,certifiedService:t,agent:a}=ue({options:{...r,canisterId:c},idlFactory:te,certifiedIdlFactory:ee});return new B(a,c,n,t,r.updateCallOverride??I,r.queryCallOverride??L,r.hardwareWallet)}accountBalance=async({accountIdentifier:r,certified:c=!0})=>this.hardwareWallet?this.accountBalanceHardwareWallet({accountIdentifier:r,certified:c}):(await(c?this.certifiedService:this.service).account_balance({account:r.toUint8Array()})).e8s;transactionFee=async()=>{let{transfer_fee:{e8s:r}}=await this.service.transfer_fee({});return r};transfer=async r=>{if(this.hardwareWallet)return this.transferHardwareWallet(r);r.fee===void 0&&(r.fee=this.hardwareWallet?N:await this.transactionFee());let c=ne(r),n=await this.certifiedService.transfer(c);if("Err"in n)throw oe(n.Err);return n.Ok};accountBalanceHardwareWallet=async({accountIdentifier:r,certified:c=!0})=>{let n=c?this.updateFetcher:this.queryFetcher,{AccountBalanceRequest:t,ICPTs:a}=await R(),d=new t;d.setAccount(await r.toProto());let f=await n({agent:this.agent,canisterId:this.canisterId,methodName:"account_balance_pb",arg:d.serializeBinary()});return BigInt(a.deserializeBinary(new Uint8Array(f)).getE8s())};transferHardwareWallet=async({to:r,amount:c,memo:n,fee:t,fromSubAccount:a,createdAt:d})=>{let{SendRequest:f,Payment:T,Memo:P,TimeStamp:o,BlockHeight:y}=await R(),u=new f;u.setTo(await r.toProto());let i=new T;i.setReceiverGets(await X(c)),u.setPayment(i),u.setMaxFee(await X(t??N));let l=new P;if(l.setMemo((n??BigInt(0)).toString()),u.setMemo(l),d!==void 0){let s=new o;s.setTimestampNanos(d.toString()),u.setCreatedAtTime(s)}a!==void 0&&u.setFromSubaccount(await ce(a));try{let s=await this.updateFetcher({agent:this.agent,canisterId:this.canisterId,methodName:"send_pb",arg:u.serializeBinary()});return BigInt(y.deserializeBinary(s).getHeight())}catch(s){throw s instanceof Error?ae(s):s}}};export{_ as a,Y as b,A as c,v as d,k as e,V as f,Z as g,oe as h,ae as i,B as j};
//# sourceMappingURL=chunk-LRX366G2.js.map
